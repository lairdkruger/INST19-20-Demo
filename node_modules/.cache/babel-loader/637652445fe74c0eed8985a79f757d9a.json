{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/TwoImagePlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport { useLoader, useFrame, useThree } from 'react-three-fiber';\nimport state from '../../store';\nimport lerp from 'lerp';\nimport { useBlock } from '../Blocks';\nimport './materials/MorphMaterial'; // A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction TwoImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      props = _objectWithoutProperties(_ref, [\"color\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, props.src); // BREAKS IF THIS IS REMOVED???\n\n  var images = document.getElementsByClassName('image-plane');\n  images = Array.from(images); //convert to array\n\n  const image = images.filter(el => el.dataset.id === props.image_id)[0];\n  const imageSize = new THREE.Vector2(0, 0);\n  const imageOffset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        left = _image$getBoundingCli.left;\n\n  imageSize.set(width, height);\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0);\n  const imageTexture = useLoader(THREE.TextureLoader, props.src);\n  const previousImageTexture = useLoader(THREE.TextureLoader, props.src_prev);\n\n  const _useBlock = useBlock(),\n        viewportHeight = _useBlock.viewportHeight,\n        offset = _useBlock.offset;\n\n  let last = state.top.current;\n  useFrame(() => {\n    const top = state.top;\n    const offsetMapped = (offset * viewportHeight - top.current) / viewportHeight;\n    material.current.uMixValue = offsetMapped;\n    console.log(offsetMapped);\n    last = top.current;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"morphMaterial\", {\n    ref: material,\n    attach: \"material\",\n    uTexture: imageTexture,\n    uPreviousTexture: previousImageTexture,\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default TwoImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/TwoImagePlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","useThree","state","lerp","useBlock","TwoImagePlane","color","props","material","texture","TextureLoader","src","images","document","getElementsByClassName","Array","from","image","filter","el","dataset","id","image_id","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","left","set","window","innerWidth","imageTexture","previousImageTexture","src_prev","viewportHeight","offset","last","top","current","offsetMapped","uMixValue","console","log","x","y"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader, useFrame, useThree} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\nimport {useBlock} from '../Blocks'\n\nimport './materials/MorphMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction TwoImagePlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, props.src)\n    const previousImageTexture = useLoader(THREE.TextureLoader, props.src_prev)\n\n    const {viewportHeight, offset} = useBlock()\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const offsetMapped = (offset * viewportHeight - top.current) / viewportHeight\n        material.current.uMixValue = offsetMapped\n\n        console.log(offsetMapped)\n\n        last = top.current\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <morphMaterial\n                ref={material}\n                attach=\"material\"\n                uTexture={imageTexture}\n                uPreviousTexture={previousImageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default TwoImagePlane\n"]},"metadata":{},"sourceType":"module"}