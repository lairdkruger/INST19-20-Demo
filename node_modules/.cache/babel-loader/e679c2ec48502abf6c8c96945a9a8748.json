{"ast":null,"code":"var _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport lerp from 'lerp';\nimport '../materials/LightbarMaterial'; // re-use for instance computations\n\nconst tempObject = new THREE.Object3D();\n\nfunction LightbarsInstanced(props) {\n  const meshRef = useRef();\n  const numPoints = 10;\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const barWidth = viewport.width / 10;\n  const barHeight = viewport.height;\n  const minXPos = -viewport.width / 1.75,\n        maxXPos = viewport.width / 1.75;\n  const minInterval = 1000,\n        maxInterval = 5000; // returns random float between lower and upper bounds\n\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound);\n  } // update instance matrices only when needed\n\n\n  React.useEffect(() => {\n    const mesh = meshRef.current; // set the transform matrix for each instance\n\n    for (let i = 0; i < numPoints; ++i) {\n      const x = random(minXPos, maxXPos);\n      tempObject.position.set(x, 0, 0);\n      tempObject.updateMatrix();\n      mesh.setMatrixAt(i, tempObject.matrix);\n    }\n\n    mesh.instanceMatrix.needsUpdate = true;\n  }, [numPoints]); // lerp bar to its new position\n\n  useFrame(delta => {\n    const mesh = meshRef.current;\n    console.log(delta);\n\n    for (let i = 0; i < numPoints; ++i) {\n      const posX = random(minXPos, maxXPos);\n      tempObject.position.x += 0.01;\n      tempObject.updateMatrix();\n      mesh.setMatrixAt(i, tempObject.matrix);\n    }\n\n    mesh.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numPoints],\n    frustumCulled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [barWidth, barHeight],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default LightbarsInstanced;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js"],"names":["React","useRef","useEffect","useState","THREE","useFrame","useThree","lerp","tempObject","Object3D","LightbarsInstanced","props","meshRef","numPoints","viewport","barWidth","width","barHeight","height","minXPos","maxXPos","minInterval","maxInterval","random","lowerBound","upperBound","Math","mesh","current","i","x","position","set","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","delta","console","log","posX"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport * as THREE from 'three'\nimport {useFrame, useThree} from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\n// re-use for instance computations\nconst tempObject = new THREE.Object3D()\n\nfunction LightbarsInstanced(props) {\n    const meshRef = useRef()\n    const numPoints = 10\n\n    const {viewport} = useThree()\n    const barWidth = viewport.width / 10\n    const barHeight = viewport.height\n    const [minXPos, maxXPos] = [-viewport.width / 1.75, viewport.width / 1.75]\n    const [minInterval, maxInterval] = [1000, 5000]\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // update instance matrices only when needed\n    React.useEffect(() => {\n        const mesh = meshRef.current\n\n        // set the transform matrix for each instance\n        for (let i = 0; i < numPoints; ++i) {\n            const x = random(minXPos, maxXPos)\n\n            tempObject.position.set(x, 0, 0)\n\n            tempObject.updateMatrix()\n            mesh.setMatrixAt(i, tempObject.matrix)\n        }\n\n        mesh.instanceMatrix.needsUpdate = true\n    }, [numPoints])\n\n    // lerp bar to its new position\n    useFrame((delta) => {\n        const mesh = meshRef.current\n\n        console.log(delta)\n\n        for (let i = 0; i < numPoints; ++i) {\n            const posX = random(minXPos, maxXPos)\n\n            tempObject.position.x += 0.01\n\n            tempObject.updateMatrix()\n            mesh.setMatrixAt(i, tempObject.matrix)\n        }\n        mesh.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <instancedMesh ref={meshRef} args={[null, null, numPoints]} frustumCulled={false}>\n            <planeBufferGeometry attach=\"geometry\" args={[barWidth, barHeight]} />\n            <meshStandardMaterial attach=\"material\" color=\"#fff\" />\n        </instancedMesh>\n    )\n}\n\nexport default LightbarsInstanced\n"]},"metadata":{},"sourceType":"module"}