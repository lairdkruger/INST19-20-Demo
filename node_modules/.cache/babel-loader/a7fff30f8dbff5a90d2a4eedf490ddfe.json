{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass ParagraphMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        opacity: {\n          value: 1\n        },\n        color: {\n          value: new Color('white')\n        },\n        image_texture: {\n          value: null\n        },\n        scale: {\n          value: 0\n        },\n        shift: {\n          value: 0\n        },\n        offset: {\n          value: 0\n        }\n      },\n      vertexShader: \"\\n                uniform float scale;\\n                uniform float shift;\\n                varying vec2 vUv;\\n\\n                float rand(vec2 co){\\n                  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n                }\\n\\n                void main() {\\n                  vec3 pos = position;\\n                  // pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\\n                  pos.y = pos.y + (rand(vec2(pos.x, pos.x)) * shift * 2.0);\\n                  vUv = uv;\\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n              }\",\n      fragmentShader: \"\\n                uniform sampler2D image_texture;\\n                uniform float shift;\\n                uniform float scale;\\n                uniform vec3 color;\\n                uniform float opacity;\\n                uniform float offset;\\n\\n                varying vec2 vUv;\\n                void main() {\\n                  vec4 texel = texture2D(image_texture, vUv);\\n                  float alpha = clamp((texel.r * texel.b), 0.0, 1.0);\\n                  vec3 final = vec3(texel.b + texel.g, texel.b + texel.g, texel.b + texel.g);\\n\\n                  alpha *= 1.0 - pow(abs(offset), 0.5);\\n\\n                  gl_FragColor = vec4(final, alpha);\\n            }\"\n    });\n  }\n\n  get color() {\n    return this.uniforms.color.value;\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value;\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n\n  set map(value) {\n    this.uniforms.image_texture.value = value;\n  }\n\n  get map() {\n    return this.uniforms.image_texture.value;\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value;\n  }\n\n  get shift() {\n    return this.uniforms.shift.value;\n  }\n\n  set offset(value) {\n    this.uniforms.offset.value = value;\n  }\n\n  get offset() {\n    return this.uniforms.offset.value;\n  }\n\n}\n\nextend({\n  ParagraphMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/materials/ParagraphMaterial.js"],"names":["ShaderMaterial","Color","extend","ParagraphMaterial","constructor","uniforms","opacity","value","color","image_texture","scale","shift","offset","vertexShader","fragmentShader","map"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,KAAxB,QAAoC,OAApC;AACA,SAAQC,MAAR,QAAqB,mBAArB;;AAEA,MAAMC,iBAAN,SAAgCH,cAAhC,CAA+C;AAC3CI,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,OAAO,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SADH;AAENC,QAAAA,KAAK,EAAE;AAACD,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,OAAV;AAAR,SAFD;AAGNQ,QAAAA,aAAa,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAHT;AAING,QAAAA,KAAK,EAAE;AAACH,UAAAA,KAAK,EAAE;AAAR,SAJD;AAKNI,QAAAA,KAAK,EAAE;AAACJ,UAAAA,KAAK,EAAE;AAAR,SALD;AAMNK,QAAAA,MAAM,EAAE;AAACL,UAAAA,KAAK,EAAE;AAAR;AANF,OADR;AAUFM,MAAAA,YAAY,0oBAVV;AA2BFC,MAAAA,cAAc;AA3BZ,KAAN;AA8CH;;AAED,MAAIN,KAAJ,GAAY;AACR,WAAO,KAAKH,QAAL,CAAcG,KAAd,CAAoBD,KAA3B;AACH;;AAED,MAAID,OAAJ,CAAYC,KAAZ,EAAmB;AACf,QAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8BA,KAA9B;AACtB;;AAED,MAAID,OAAJ,GAAc;AACV,WAAO,KAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAA7B;AACH;;AAED,MAAIQ,GAAJ,CAAQR,KAAR,EAAe;AACX,SAAKF,QAAL,CAAcI,aAAd,CAA4BF,KAA5B,GAAoCA,KAApC;AACH;;AAED,MAAIQ,GAAJ,GAAU;AACN,WAAO,KAAKV,QAAL,CAAcI,aAAd,CAA4BF,KAAnC;AACH;;AAED,MAAIG,KAAJ,CAAUH,KAAV,EAAiB;AACb,SAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;AACH;;AAED,MAAIG,KAAJ,GAAY;AACR,WAAO,KAAKL,QAAL,CAAcK,KAAd,CAAoBH,KAA3B;AACH;;AAED,MAAII,KAAJ,CAAUJ,KAAV,EAAiB;AACb,SAAKF,QAAL,CAAcM,KAAd,CAAoBJ,KAApB,GAA4BA,KAA5B;AACH;;AAED,MAAII,KAAJ,GAAY;AACR,WAAO,KAAKN,QAAL,CAAcM,KAAd,CAAoBJ,KAA3B;AACH;;AAED,MAAIK,MAAJ,CAAWL,KAAX,EAAkB;AACd,SAAKF,QAAL,CAAcO,MAAd,CAAqBL,KAArB,GAA6BA,KAA7B;AACH;;AAED,MAAIK,MAAJ,GAAa;AACT,WAAO,KAAKP,QAAL,CAAcO,MAAd,CAAqBL,KAA5B;AACH;;AA5F0C;;AA+F/CL,MAAM,CAAC;AAACC,EAAAA;AAAD,CAAD,CAAN","sourcesContent":["import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass ParagraphMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                color: {value: new Color('white')},\n                image_texture: {value: null},\n                scale: {value: 0},\n                shift: {value: 0},\n                offset: {value: 0},\n            },\n\n            vertexShader: `\n                uniform float scale;\n                uniform float shift;\n                varying vec2 vUv;\n\n                float rand(vec2 co){\n                  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n                }\n\n                void main() {\n                  vec3 pos = position;\n                  // pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n                  pos.y = pos.y + (rand(vec2(pos.x, pos.x)) * shift * 2.0);\n                  vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n              }`,\n\n            fragmentShader: `\n                uniform sampler2D image_texture;\n                uniform float shift;\n                uniform float scale;\n                uniform vec3 color;\n                uniform float opacity;\n                uniform float offset;\n\n                varying vec2 vUv;\n                void main() {\n                  vec4 texel = texture2D(image_texture, vUv);\n                  float alpha = clamp((texel.r * texel.b), 0.0, 1.0);\n                  vec3 final = vec3(texel.b + texel.g, texel.b + texel.g, texel.b + texel.g);\n\n                  alpha *= 1.0 - pow(abs(offset), 0.5);\n\n                  gl_FragColor = vec4(final, alpha);\n            }`,\n        })\n    }\n\n    get color() {\n        return this.uniforms.color.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set map(value) {\n        this.uniforms.image_texture.value = value\n    }\n\n    get map() {\n        return this.uniforms.image_texture.value\n    }\n\n    set scale(value) {\n        this.uniforms.scale.value = value\n    }\n\n    get scale() {\n        return this.uniforms.scale.value\n    }\n\n    set shift(value) {\n        this.uniforms.shift.value = value\n    }\n\n    get shift() {\n        return this.uniforms.shift.value\n    }\n\n    set offset(value) {\n        this.uniforms.offset.value = value\n    }\n\n    get offset() {\n        return this.uniforms.offset.value\n    }\n}\n\nextend({ParagraphMaterial})\n"]},"metadata":{},"sourceType":"module"}