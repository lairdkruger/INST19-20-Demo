{"ast":null,"code":"var _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport lerp from 'lerp';\nimport '../materials/LightbarMaterial'; // re-use for instance computations\n\nconst tempObject = new THREE.Object3D();\n\nfunction LightbarsInstanced(props) {\n  const meshRef = useRef();\n  const numPoints = 10;\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const barWidth = viewport.width / 10;\n  const barHeight = viewport.height;\n  const minXPos = -viewport.width / 1.75,\n        maxXPos = viewport.width / 1.75;\n  const minInterval = 1000,\n        maxInterval = 5000;\n  const positions = new Array(numPoints).fill(0); // returns random float between lower and upper bounds\n\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound);\n  } // custom hook to make intervals work in react\n\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef(); // Remember the latest function.\n\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]); // Set up the interval.\n\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\n  for (let i = 0; i < numPoints; ++i) {\n    useInterval(() => {\n      positions[i] = random(minXPos, maxXPos);\n    }, random(minInterval, maxInterval));\n  } // lerp bar to its new position\n\n\n  useFrame(() => {\n    const mesh = meshRef.current;\n\n    for (let i = 0; i < numPoints; ++i) {\n      tempObject.position.x = lerp(tempObject.position.x, positions[i], 0.01);\n      tempObject.updateMatrix();\n      mesh.setMatrixAt(i, tempObject.matrix);\n    }\n\n    mesh.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numPoints],\n    frustumCulled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [barWidth, barHeight],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default LightbarsInstanced;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js"],"names":["React","useRef","useEffect","useState","THREE","useFrame","useThree","lerp","tempObject","Object3D","LightbarsInstanced","props","meshRef","numPoints","viewport","barWidth","width","barHeight","height","minXPos","maxXPos","minInterval","maxInterval","positions","Array","fill","random","lowerBound","upperBound","Math","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","i","mesh","position","x","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport * as THREE from 'three'\nimport {useFrame, useThree} from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\n// re-use for instance computations\nconst tempObject = new THREE.Object3D()\n\nfunction LightbarsInstanced(props) {\n    const meshRef = useRef()\n    const numPoints = 10\n\n    const {viewport} = useThree()\n    const barWidth = viewport.width / 10\n    const barHeight = viewport.height\n    const [minXPos, maxXPos] = [-viewport.width / 1.75, viewport.width / 1.75]\n    const [minInterval, maxInterval] = [1000, 5000]\n    const positions = new Array(numPoints).fill(0)\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // custom hook to make intervals work in react\n    function useInterval(callback, delay) {\n        const savedCallback = useRef()\n\n        // Remember the latest function.\n        useEffect(() => {\n            savedCallback.current = callback\n        }, [callback])\n\n        // Set up the interval.\n        useEffect(() => {\n            function tick() {\n                savedCallback.current()\n            }\n            if (delay !== null) {\n                let id = setInterval(tick, delay)\n                return () => clearInterval(id)\n            }\n        }, [delay])\n    }\n\n    for (let i = 0; i < numPoints; ++i) {\n        useInterval(() => {\n            positions[i] = random(minXPos, maxXPos)\n        }, random(minInterval, maxInterval))\n    }\n\n    // lerp bar to its new position\n    useFrame(() => {\n        const mesh = meshRef.current\n\n        for (let i = 0; i < numPoints; ++i) {\n            tempObject.position.x = lerp(tempObject.position.x, positions[i], 0.01)\n            tempObject.updateMatrix()\n            mesh.setMatrixAt(i, tempObject.matrix)\n        }\n        mesh.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <instancedMesh ref={meshRef} args={[null, null, numPoints]} frustumCulled={false}>\n            <planeBufferGeometry attach=\"geometry\" args={[barWidth, barHeight]} />\n\n            <meshStandardMaterial attach=\"material\" color=\"#fff\" />\n        </instancedMesh>\n    )\n}\n\nexport default LightbarsInstanced\n"]},"metadata":{},"sourceType":"module"}