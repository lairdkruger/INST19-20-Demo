{"ast":null,"code":"var _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport '../materials/LightbarMaterial'; // re-use for instance computations\n\nconst tempObject = new THREE.Object3D();\n\nfunction LightbarsInstanced(props) {\n  const meshRef = useRef();\n  const numPoints = 10;\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const barWidth = viewport.width / 10;\n  const barHeight = viewport.height; // update instance matrices only when needed\n\n  React.useEffect(() => {\n    const mesh = meshRef.current; // set the transform matrix for each instance\n\n    for (let i = 0; i < numPoints; ++i) {\n      const x = i % 30 * 3.0;\n      const y = Math.floor(i / 30) * 1.05;\n      const z = 0;\n      tempObject.position.set(x, y, z);\n      tempObject.rotation.set(0.5 * Math.PI, 0, 0); // cylinders face z direction\n\n      tempObject.updateMatrix();\n      mesh.setMatrixAt(i, tempObject.matrix);\n    }\n\n    mesh.instanceMatrix.needsUpdate = true;\n  }, [numPoints]);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numPoints],\n    frustumCulled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [barWidth, barWidth, barHeight],\n    rotation: [2.0, 2.0, 2.0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default LightbarsInstanced;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js"],"names":["React","useRef","useEffect","useState","THREE","useFrame","useThree","tempObject","Object3D","LightbarsInstanced","props","meshRef","numPoints","viewport","barWidth","width","barHeight","height","mesh","current","i","x","y","Math","floor","z","position","set","rotation","PI","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,mBAAjC;AAEA,OAAO,+BAAP,C,CAEA;;AACA,MAAMC,UAAU,GAAG,IAAIH,KAAK,CAACI,QAAV,EAAnB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,QAAMC,OAAO,GAAGV,MAAM,EAAtB;AACA,QAAMW,SAAS,GAAG,EAAlB;;AAF+B,oBAIZN,QAAQ,EAJI;AAAA,QAIxBO,QAJwB,aAIxBA,QAJwB;;AAK/B,QAAMC,QAAQ,GAAGD,QAAQ,CAACE,KAAT,GAAiB,EAAlC;AACA,QAAMC,SAAS,GAAGH,QAAQ,CAACI,MAA3B,CAN+B,CAQ/B;;AACAjB,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClB,UAAMgB,IAAI,GAAGP,OAAO,CAACQ,OAArB,CADkB,CAGlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAApB,EAA+B,EAAEQ,CAAjC,EAAoC;AAChC,YAAMC,CAAC,GAAID,CAAC,GAAG,EAAL,GAAW,GAArB;AACA,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAG,EAAf,IAAqB,IAA/B;AACA,YAAMK,CAAC,GAAG,CAAV;AAEAlB,MAAAA,UAAU,CAACmB,QAAX,CAAoBC,GAApB,CAAwBN,CAAxB,EAA2BC,CAA3B,EAA8BG,CAA9B;AACAlB,MAAAA,UAAU,CAACqB,QAAX,CAAoBD,GAApB,CAAwB,MAAMJ,IAAI,CAACM,EAAnC,EAAuC,CAAvC,EAA0C,CAA1C,EANgC,CAMa;;AAC7CtB,MAAAA,UAAU,CAACuB,YAAX;AACAZ,MAAAA,IAAI,CAACa,WAAL,CAAiBX,CAAjB,EAAoBb,UAAU,CAACyB,MAA/B;AACH;;AAEDd,IAAAA,IAAI,CAACe,cAAL,CAAoBC,WAApB,GAAkC,IAAlC;AACH,GAhBD,EAgBG,CAACtB,SAAD,CAhBH;AAkBA,sBACI;AAAe,IAAA,GAAG,EAAED,OAApB;AAA6B,IAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAaC,SAAb,CAAnC;AAA4D,IAAA,aAAa,EAAE,KAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,MAAM,EAAC,UADX;AAEI,IAAA,IAAI,EAAE,CAACE,QAAD,EAAWA,QAAX,EAAqBE,SAArB,CAFV;AAGI,IAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI;AAAsB,IAAA,MAAM,EAAC,UAA7B;AAAwC,IAAA,KAAK,EAAC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ;AAUH;;AAED,eAAeP,kBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport * as THREE from 'three'\nimport {useFrame, useThree} from 'react-three-fiber'\n\nimport '../materials/LightbarMaterial'\n\n// re-use for instance computations\nconst tempObject = new THREE.Object3D()\n\nfunction LightbarsInstanced(props) {\n    const meshRef = useRef()\n    const numPoints = 10\n\n    const {viewport} = useThree()\n    const barWidth = viewport.width / 10\n    const barHeight = viewport.height\n\n    // update instance matrices only when needed\n    React.useEffect(() => {\n        const mesh = meshRef.current\n\n        // set the transform matrix for each instance\n        for (let i = 0; i < numPoints; ++i) {\n            const x = (i % 30) * 3.0\n            const y = Math.floor(i / 30) * 1.05\n            const z = 0\n\n            tempObject.position.set(x, y, z)\n            tempObject.rotation.set(0.5 * Math.PI, 0, 0) // cylinders face z direction\n            tempObject.updateMatrix()\n            mesh.setMatrixAt(i, tempObject.matrix)\n        }\n\n        mesh.instanceMatrix.needsUpdate = true\n    }, [numPoints])\n\n    return (\n        <instancedMesh ref={meshRef} args={[null, null, numPoints]} frustumCulled={false}>\n            <boxBufferGeometry\n                attach=\"geometry\"\n                args={[barWidth, barWidth, barHeight]}\n                rotation={[2.0, 2.0, 2.0]}\n            />\n            <meshStandardMaterial attach=\"material\" color=\"#fff\" />\n        </instancedMesh>\n    )\n}\n\nexport default LightbarsInstanced\n"]},"metadata":{},"sourceType":"module"}