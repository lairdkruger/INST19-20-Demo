{"ast":null,"code":"import _slicedToArray from\"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState}from'react';import{useThree,useFrame}from'react-three-fiber';import lerp from'lerp';import'../materials/LightbarMaterial';function Lightbar(props){const bar=useRef();const material=useRef();const _useThree=useThree(),viewport=_useThree.viewport;const minWidth=-viewport.width/1.75,maxWidth=viewport.width/1.75;const minInterval=300,maxInterval=5000;const zPos=1/props.bar.width*100;const _useState=useState(false),_useState2=_slicedToArray(_useState,2),hovered=_useState2[0],setHovered=_useState2[1];let xPos=0;let alpha=0;// returns random float between lower and upper bounds\nfunction random(lowerBound,upperBound){return lowerBound+Math.random()*(upperBound+1-lowerBound);}// random position for each bar at random intervals\nfunction doSomething(){xPos=random(minWidth,maxWidth);alpha=Math.random()/5;};(function loop(){setTimeout(function(){doSomething();loop();},random(minInterval,maxInterval));})();// lerp bar to its new position\nuseFrame(()=>{bar.current.position.x=lerp(bar.current.position.x,xPos,0.01);if(hovered){material.current.uOpacity=1.0;}else{material.current.uOpacity=lerp(material.current.uOpacity,alpha,0.01);}});return/*#__PURE__*/React.createElement(\"mesh\",{ref:bar,onPointerOver:e=>setHovered(true),onPointerOut:e=>setHovered(false),position:[0,0,zPos]},/*#__PURE__*/React.createElement(\"planeBufferGeometry\",{attach:\"geometry\",args:[props.bar.width,props.bar.height]}),/*#__PURE__*/React.createElement(\"lightbarMaterial\",{ref:material,attach:\"material\",uColor:props.bar.color,transparent:true}));}export default Lightbar;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/Lightbar.js"],"names":["React","useRef","useState","useThree","useFrame","lerp","Lightbar","props","bar","material","viewport","minWidth","width","maxWidth","minInterval","maxInterval","zPos","hovered","setHovered","xPos","alpha","random","lowerBound","upperBound","Math","doSomething","loop","setTimeout","current","position","x","uOpacity","e","height","color"],"mappings":"sMAAA,MAAOA,CAAAA,KAAP,EAAeC,MAAf,CAAuBC,QAAvB,KAAsC,OAAtC,CACA,OAAQC,QAAR,CAAkBC,QAAlB,KAAiC,mBAAjC,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,MAAO,+BAAP,CAEA,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAyB,CACrB,KAAMC,CAAAA,GAAG,CAAGP,MAAM,EAAlB,CACA,KAAMQ,CAAAA,QAAQ,CAAGR,MAAM,EAAvB,CAFqB,gBAIFE,QAAQ,EAJN,CAIdO,QAJc,WAIdA,QAJc,MAKdC,CAAAA,QALc,CAKS,CAACD,QAAQ,CAACE,KAAV,CAAkB,IAL3B,CAKJC,QALI,CAKiCH,QAAQ,CAACE,KAAT,CAAiB,IALlD,MAMdE,CAAAA,WANc,CAMe,GANf,CAMDC,WANC,CAMoB,IANpB,CAQrB,KAAMC,CAAAA,IAAI,CAAI,EAAIT,KAAK,CAACC,GAAN,CAAUI,KAAf,CAAwB,GAArC,CARqB,gBAUSV,QAAQ,CAAC,KAAD,CAVjB,wCAUde,OAVc,eAULC,UAVK,eAYrB,GAAIC,CAAAA,IAAI,CAAG,CAAX,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAZ,CAEA;AACA,QAASC,CAAAA,MAAT,CAAgBC,UAAhB,CAA4BC,UAA5B,CAAwC,CACpC,MAAOD,CAAAA,UAAU,CAAGE,IAAI,CAACH,MAAL,IAAiBE,UAAU,CAAG,CAAb,CAAiBD,UAAlC,CAApB,CACH,CAED;AACA,QAASG,CAAAA,WAAT,EAAuB,CACnBN,IAAI,CAAGE,MAAM,CAACV,QAAD,CAAWE,QAAX,CAAb,CACAO,KAAK,CAAGI,IAAI,CAACH,MAAL,GAAgB,CAAxB,CACH,CAED,CAAC,CAAC,QAASK,CAAAA,IAAT,EAAgB,CACdC,UAAU,CAAC,UAAY,CACnBF,WAAW,GACXC,IAAI,GACP,CAHS,CAGPL,MAAM,CAACP,WAAD,CAAcC,WAAd,CAHC,CAAV,CAIH,CALA,IAOD;AACAX,QAAQ,CAAC,IAAM,CACXI,GAAG,CAACoB,OAAJ,CAAYC,QAAZ,CAAqBC,CAArB,CAAyBzB,IAAI,CAACG,GAAG,CAACoB,OAAJ,CAAYC,QAAZ,CAAqBC,CAAtB,CAAyBX,IAAzB,CAA+B,IAA/B,CAA7B,CACA,GAAIF,OAAJ,CAAa,CACTR,QAAQ,CAACmB,OAAT,CAAiBG,QAAjB,CAA4B,GAA5B,CACH,CAFD,IAEO,CACHtB,QAAQ,CAACmB,OAAT,CAAiBG,QAAjB,CAA4B1B,IAAI,CAACI,QAAQ,CAACmB,OAAT,CAAiBG,QAAlB,CAA4BX,KAA5B,CAAmC,IAAnC,CAAhC,CACH,CACJ,CAPO,CAAR,CASA,mBACI,4BACI,GAAG,CAAEZ,GADT,CAEI,aAAa,CAAGwB,CAAD,EAAOd,UAAU,CAAC,IAAD,CAFpC,CAGI,YAAY,CAAGc,CAAD,EAAOd,UAAU,CAAC,KAAD,CAHnC,CAII,QAAQ,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAOF,IAAP,CAJd,eAMI,2CACI,MAAM,CAAC,UADX,CAEI,IAAI,CAAE,CAACT,KAAK,CAACC,GAAN,CAAUI,KAAX,CAAkBL,KAAK,CAACC,GAAN,CAAUyB,MAA5B,CAFV,EANJ,cAUI,wCACI,GAAG,CAAExB,QADT,CAEI,MAAM,CAAC,UAFX,CAGI,MAAM,CAAEF,KAAK,CAACC,GAAN,CAAU0B,KAHtB,CAII,WAAW,CAAE,IAJjB,EAVJ,CADJ,CAmBH,CAED,cAAe5B,CAAAA,QAAf","sourcesContent":["import React, {useRef, useState} from 'react'\nimport {useThree, useFrame} from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\nfunction Lightbar(props) {\n    const bar = useRef()\n    const material = useRef()\n\n    const {viewport} = useThree()\n    const [minWidth, maxWidth] = [-viewport.width / 1.75, viewport.width / 1.75]\n    const [minInterval, maxInterval] = [300, 5000]\n\n    const zPos = (1 / props.bar.width) * 100\n\n    const [hovered, setHovered] = useState(false)\n\n    let xPos = 0\n    let alpha = 0\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // random position for each bar at random intervals\n    function doSomething() {\n        xPos = random(minWidth, maxWidth)\n        alpha = Math.random() / 5\n    }\n\n    ;(function loop() {\n        setTimeout(function () {\n            doSomething()\n            loop()\n        }, random(minInterval, maxInterval))\n    })()\n\n    // lerp bar to its new position\n    useFrame(() => {\n        bar.current.position.x = lerp(bar.current.position.x, xPos, 0.01)\n        if (hovered) {\n            material.current.uOpacity = 1.0\n        } else {\n            material.current.uOpacity = lerp(material.current.uOpacity, alpha, 0.01)\n        }\n    })\n\n    return (\n        <mesh\n            ref={bar}\n            onPointerOver={(e) => setHovered(true)}\n            onPointerOut={(e) => setHovered(false)}\n            position={[0, 0, zPos]}\n        >\n            <planeBufferGeometry\n                attach=\"geometry\"\n                args={[props.bar.width, props.bar.height]}\n            />\n            <lightbarMaterial\n                ref={material}\n                attach=\"material\"\n                uColor={props.bar.color}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default Lightbar\n"]},"metadata":{},"sourceType":"module"}