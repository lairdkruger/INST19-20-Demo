{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/TypeMaskPlane.js\";\nimport * as THREE from 'three';\nimport React, { useRef, useMemo } from 'react';\nimport { createPortal, useFrame, useThree } from 'react-three-fiber';\nimport { Text, Shadow, OrthographicCamera } from 'drei';\nimport '../materials/TypeMaskMaterial';\n\nfunction TypeMaskPlane(props) {\n  const cam = useRef();\n  const material = useRef();\n  const content = 'BOX';\n\n  const _useMemo = useMemo(() => {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('white');\n    const target = new THREE.WebGLRenderTarget(2048, 2048);\n    return [scene, target];\n  }, []),\n        _useMemo2 = _slicedToArray(_useMemo, 2),\n        scene = _useMemo2[0],\n        target = _useMemo2[1];\n\n  const startTime = Date.now();\n  useFrame(state => {\n    state.gl.setRenderTarget(target);\n    state.gl.render(scene, cam.current);\n    state.gl.setRenderTarget(null);\n    material.current.uTime = Date.now() - startTime;\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OrthographicCamera, {\n    ref: cam,\n    position: [0, 0, 10],\n    zoom: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), // createPortal: Render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n  createPortal(\n  /*#__PURE__*/\n  // Drei's Troika Text engine\n  React.createElement(Text, {\n    color: 0x000000,\n    fontSize: 40,\n    maxWidth: window.width,\n    lineHeight: 1.0,\n    letterSpacing: -0.08,\n    textAlign: 'justify',\n    font: \"https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff\",\n    anchorX: \"center\",\n    anchorY: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, content), scene), /*#__PURE__*/React.createElement(\"mesh\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"typeMaskMaterial\", {\n    ref: material,\n    attach: \"material\",\n    uTexture: target.texture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Shadow, {\n    color: \"#000000\",\n    scale: [3, 3, 1],\n    opacity: 0.2,\n    position: [0, -2, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default TypeMaskPlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/TypeMaskPlane.js"],"names":["THREE","React","useRef","useMemo","createPortal","useFrame","useThree","Text","Shadow","OrthographicCamera","TypeMaskPlane","props","cam","material","content","scene","Scene","background","Color","target","WebGLRenderTarget","startTime","Date","now","state","gl","setRenderTarget","render","current","uTime","window","width","texture","Math","PI"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, {useRef, useMemo} from 'react'\nimport {createPortal, useFrame, useThree} from 'react-three-fiber'\nimport {Text, Shadow, OrthographicCamera} from 'drei'\n\nimport '../materials/TypeMaskMaterial'\n\nfunction TypeMaskPlane(props) {\n    const cam = useRef()\n    const material = useRef()\n    const content = 'BOX'\n\n    const [scene, target] = useMemo(() => {\n        const scene = new THREE.Scene()\n        scene.background = new THREE.Color('white')\n        const target = new THREE.WebGLRenderTarget(2048, 2048)\n        return [scene, target]\n    }, [])\n\n    const startTime = Date.now()\n\n    useFrame((state) => {\n        state.gl.setRenderTarget(target)\n        state.gl.render(scene, cam.current)\n        state.gl.setRenderTarget(null)\n\n        material.current.uTime = Date.now() - startTime\n    })\n\n    return (\n        <>\n            <OrthographicCamera ref={cam} position={[0, 0, 10]} zoom={10} />\n            {\n                // createPortal: Render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n                createPortal(\n                    // Drei's Troika Text engine\n                    <Text\n                        color={0x000000}\n                        fontSize={40}\n                        maxWidth={window.width}\n                        lineHeight={1.0}\n                        letterSpacing={-0.08}\n                        textAlign={'justify'}\n                        font=\"https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff\"\n                        anchorX=\"center\"\n                        anchorY=\"middle\"\n                    >\n                        {content}\n                    </Text>,\n                    scene\n                )\n            }\n            <mesh {...props}>\n                {/* Use plane to size text appropriately */}\n                <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n                {/* <boxBufferGeometry attach=\"geometry\" args={[3, 3, 3]} /> */}\n                <typeMaskMaterial\n                    ref={material}\n                    attach=\"material\"\n                    uTexture={target.texture}\n                />\n            </mesh>\n\n            <Shadow\n                color=\"#000000\"\n                scale={[3, 3, 1]}\n                opacity={0.2}\n                position={[0, -2, 0]}\n                rotation={[-Math.PI / 2, 0, 0]}\n            />\n        </>\n    )\n}\n\nexport default TypeMaskPlane\n"]},"metadata":{},"sourceType":"module"}