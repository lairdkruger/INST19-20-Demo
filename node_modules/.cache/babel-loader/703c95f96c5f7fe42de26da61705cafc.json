{"ast":null,"code":"import{ShaderMaterial}from'three';import{extend}from'react-three-fiber';class MorphMaterial extends ShaderMaterial{constructor(){super({uniforms:{opacity:{value:1},uTexture:{value:null},uPreviousTexture:{value:null},uMixValue:{value:0}},vertexShader:\"\\n                uniform vec2 uOffset;\\n\\n                varying vec2 vUv;\\n\\n                vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) {\\n                    float M_PI = 3.1415926535897932384626433832795;\\n                    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\\n                    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\\n                    return position;\\n                }\\n\\n                void main() {\\n                    vUv =  uv;\\n                    vec3 newPosition = position;\\n                    newPosition = deformationCurve(position,uv,uOffset);\\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\\n                }\",fragmentShader:\"\\n                uniform sampler2D uTexture;\\n                uniform sampler2D uPreviousTexture;\\n                uniform float opacity;\\n                uniform float uMixValue;\\n\\n                varying vec2 vUv;\\n\\n                float strength = 0.5;\\n\\n                //https://github.com/gl-transitions/gl-transitions/blob/master/transitions/morph.glsl\\n                vec3 transition(vec2 uv) {\\n                    float inv = 1.0 - uMixValue;\\n\\n                    vec4 fromColor = texture2D(uPreviousTexture, uv);\\n                    vec4 toColor = texture2D(uTexture, uv);\\n\\n                    vec2 fromOffset = (((fromColor.rg + fromColor.b) * 0.5) * 2.0 - 1.0);\\n                    vec2 toOffset = (((toColor.rg + toColor.b) * 0.5) * 2.0 - 1.0);\\n                    vec2 offset = mix(fromOffset, toOffset, 0.5) * strength;\\n                    \\n                    return mix(texture2D(uPreviousTexture, uv + offset * uMixValue).rgb, texture2D(uTexture, uv - offset * inv).rgb, uMixValue);\\n                }\\n        \\n                void main() {\\n                    //float mixValue = pow(uMixValue, 4.0);\\n                    vec3 trans = transition(vUv);\\n                    //vec3 outColor = mix(transition(vUv), vec3(mixValue, 0.0, 0.0), mixValue); \\n\\n                    gl_FragColor = vec4(trans.rgb, opacity);\\n                }\"});}get opacity(){return this.uniforms.opacity.value;}set opacity(value){if(this.uniforms)this.uniforms.opacity.value=value;}set uTexture(value){this.uniforms.uTexture.value=value;}get uTexture(){return this.uniforms.uTexture.value;}set uPreviousTexture(value){this.uniforms.uPreviousTexture.value=value;}get uPreviousTexture(){return this.uniforms.uPreviousTexture.value;}set uMixValue(value){this.uniforms.uMixValue.value=value;}get uMixValue(){return this.uniforms.uMixValue.value;}}extend({MorphMaterial});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/Demo/INST19-20-Demo/INST19-20-Demo/src/components/media/materials/MorphMaterial.js"],"names":["ShaderMaterial","extend","MorphMaterial","constructor","uniforms","opacity","value","uTexture","uPreviousTexture","uMixValue","vertexShader","fragmentShader"],"mappings":"AAAA,OAAQA,cAAR,KAA6B,OAA7B,CACA,OAAQC,MAAR,KAAqB,mBAArB,CAEA,KAAMC,CAAAA,aAAN,QAA4BF,CAAAA,cAAe,CACvCG,WAAW,EAAG,CACV,MAAM,CACFC,QAAQ,CAAE,CACNC,OAAO,CAAE,CAACC,KAAK,CAAE,CAAR,CADH,CAENC,QAAQ,CAAE,CAACD,KAAK,CAAE,IAAR,CAFJ,CAGNE,gBAAgB,CAAE,CAACF,KAAK,CAAE,IAAR,CAHZ,CAING,SAAS,CAAE,CAACH,KAAK,CAAE,CAAR,CAJL,CADR,CAQFI,YAAY,2uBARV,CA2BFC,cAAc,21CA3BZ,CAAN,EA2DH,CAED,GAAIN,CAAAA,OAAJ,EAAc,CACV,MAAO,MAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAA7B,CACH,CAED,GAAID,CAAAA,OAAJ,CAAYC,KAAZ,CAAmB,CACf,GAAI,KAAKF,QAAT,CAAmB,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,CAA8BA,KAA9B,CACtB,CAED,GAAIC,CAAAA,QAAJ,CAAaD,KAAb,CAAoB,CAChB,KAAKF,QAAL,CAAcG,QAAd,CAAuBD,KAAvB,CAA+BA,KAA/B,CACH,CAED,GAAIC,CAAAA,QAAJ,EAAe,CACX,MAAO,MAAKH,QAAL,CAAcG,QAAd,CAAuBD,KAA9B,CACH,CAED,GAAIE,CAAAA,gBAAJ,CAAqBF,KAArB,CAA4B,CACxB,KAAKF,QAAL,CAAcI,gBAAd,CAA+BF,KAA/B,CAAuCA,KAAvC,CACH,CAED,GAAIE,CAAAA,gBAAJ,EAAuB,CACnB,MAAO,MAAKJ,QAAL,CAAcI,gBAAd,CAA+BF,KAAtC,CACH,CAED,GAAIG,CAAAA,SAAJ,CAAcH,KAAd,CAAqB,CACjB,KAAKF,QAAL,CAAcK,SAAd,CAAwBH,KAAxB,CAAgCA,KAAhC,CACH,CAED,GAAIG,CAAAA,SAAJ,EAAgB,CACZ,MAAO,MAAKL,QAAL,CAAcK,SAAd,CAAwBH,KAA/B,CACH,CA7FsC,CAgG3CL,MAAM,CAAC,CAACC,aAAD,CAAD,CAAN","sourcesContent":["import {ShaderMaterial} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass MorphMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                uTexture: {value: null},\n                uPreviousTexture: {value: null},\n                uMixValue: {value: 0},\n            },\n\n            vertexShader: `\n                uniform vec2 uOffset;\n\n                varying vec2 vUv;\n\n                vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) {\n                    float M_PI = 3.1415926535897932384626433832795;\n                    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n                    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n                    return position;\n                }\n\n                void main() {\n                    vUv =  uv;\n                    vec3 newPosition = position;\n                    newPosition = deformationCurve(position,uv,uOffset);\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n                }`,\n\n            fragmentShader: `\n                uniform sampler2D uTexture;\n                uniform sampler2D uPreviousTexture;\n                uniform float opacity;\n                uniform float uMixValue;\n\n                varying vec2 vUv;\n\n                float strength = 0.5;\n\n                //https://github.com/gl-transitions/gl-transitions/blob/master/transitions/morph.glsl\n                vec3 transition(vec2 uv) {\n                    float inv = 1.0 - uMixValue;\n\n                    vec4 fromColor = texture2D(uPreviousTexture, uv);\n                    vec4 toColor = texture2D(uTexture, uv);\n\n                    vec2 fromOffset = (((fromColor.rg + fromColor.b) * 0.5) * 2.0 - 1.0);\n                    vec2 toOffset = (((toColor.rg + toColor.b) * 0.5) * 2.0 - 1.0);\n                    vec2 offset = mix(fromOffset, toOffset, 0.5) * strength;\n                    \n                    return mix(texture2D(uPreviousTexture, uv + offset * uMixValue).rgb, texture2D(uTexture, uv - offset * inv).rgb, uMixValue);\n                }\n        \n                void main() {\n                    //float mixValue = pow(uMixValue, 4.0);\n                    vec3 trans = transition(vUv);\n                    //vec3 outColor = mix(transition(vUv), vec3(mixValue, 0.0, 0.0), mixValue); \n\n                    gl_FragColor = vec4(trans.rgb, opacity);\n                }`,\n        })\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set uTexture(value) {\n        this.uniforms.uTexture.value = value\n    }\n\n    get uTexture() {\n        return this.uniforms.uTexture.value\n    }\n\n    set uPreviousTexture(value) {\n        this.uniforms.uPreviousTexture.value = value\n    }\n\n    get uPreviousTexture() {\n        return this.uniforms.uPreviousTexture.value\n    }\n\n    set uMixValue(value) {\n        this.uniforms.uMixValue.value = value\n    }\n\n    get uMixValue() {\n        return this.uniforms.uMixValue.value\n    }\n}\n\nextend({MorphMaterial})\n"]},"metadata":{},"sourceType":"module"}