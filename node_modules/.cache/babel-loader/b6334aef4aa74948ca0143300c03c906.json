{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/ImagePlane.js\";\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport '../materials/ImageMaterial';\nimport { useLoader, useFrame, useThree } from 'react-three-fiber';\nimport state from '../../store';\nimport lerp from 'lerp'; // A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      props = _objectWithoutProperties(_ref, [\"color\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, props.src); // BREAKS IF THIS IS REMOVED???\n\n  let image;\n  let imageOffset;\n  let imageSize;\n  useEffect(() => {\n    var images = document.getElementsByClassName('image-plane');\n    images = Array.from(images); //convert to array\n\n    image = images.filter(el => el.dataset.id === props.image_id)[0];\n    imageSize = new THREE.Vector2(0, 0);\n    imageOffset = new THREE.Vector2(0, 0);\n\n    const _image$getBoundingCli = image.getBoundingClientRect(),\n          width = _image$getBoundingCli.width,\n          height = _image$getBoundingCli.height,\n          left = _image$getBoundingCli.left;\n\n    imageSize.set(width, height);\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0);\n  }, []);\n  const imageTexture = useLoader(THREE.TextureLoader, image.src);\n  let last = state.top.current;\n  useFrame(() => {\n    const top = state.top;\n    const scrollSpeed = top.current - last;\n    material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05);\n    last = top.current;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"customMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: imageTexture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/ImagePlane.js"],"names":["React","useRef","useEffect","THREE","useLoader","useFrame","useThree","state","lerp","ImagePlane","color","props","material","texture","TextureLoader","src","image","imageOffset","imageSize","images","document","getElementsByClassName","Array","from","filter","el","dataset","id","image_id","Vector2","getBoundingClientRect","width","height","left","set","window","innerWidth","imageTexture","last","top","current","scrollSpeed","shift","x","y"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react'\nimport * as THREE from 'three'\nimport '../materials/ImageMaterial'\nimport {useLoader, useFrame, useThree} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n\n    let image\n    let imageOffset\n    let imageSize\n\n    useEffect(() => {\n        var images = document.getElementsByClassName('image-plane')\n        images = Array.from(images) //convert to array\n\n        image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n        imageSize = new THREE.Vector2(0, 0)\n        imageOffset = new THREE.Vector2(0, 0)\n\n        const {width, height, left} = image.getBoundingClientRect()\n\n        imageSize.set(width, height)\n        imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n    }, [])\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n\n        material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05)\n        last = top.current\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <customMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n            />\n        </mesh>\n    )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}