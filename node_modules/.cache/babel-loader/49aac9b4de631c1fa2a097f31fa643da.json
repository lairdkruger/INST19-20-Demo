{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/Lightbar.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport lerp from 'lerp';\nimport '../materials/LightbarMaterial';\n\nfunction Lightbar(props) {\n  const bar = useRef();\n  const material = useRef();\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const minWidth = -viewport.width / 1.75,\n        maxWidth = viewport.width / 1.75;\n  const minInterval = 1000,\n        maxInterval = 5000;\n  const zPos = 1 / (props.bar.width / viewport.width);\n  console.log(zPos);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        hovered = _useState2[0],\n        setHovered = _useState2[1];\n\n  let xPos = 0;\n  let alpha = 0; // returns random float between lower and upper bounds\n\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound);\n  } // random position for each bar at random intervals\n\n\n  function doSomething() {\n    xPos = random(minWidth, maxWidth);\n    alpha = Math.random() / 5;\n  }\n\n  ;\n\n  (function loop() {\n    setTimeout(function () {\n      doSomething();\n      loop();\n    }, random(minInterval, maxInterval));\n  })(); // lerp bar to its new position\n\n\n  useFrame(() => {\n    bar.current.position.x = lerp(bar.current.position.x, xPos, 0.01);\n\n    if (hovered) {\n      material.current.uOpacity = 1.0;\n    } else {\n      material.current.uOpacity = lerp(material.current.uOpacity, alpha, 0.01);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: bar,\n    onPointerOver: e => setHovered(true),\n    onPointerOut: e => setHovered(false),\n    position: [0, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [props.bar.width, props.bar.height],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"lightbarMaterial\", {\n    ref: material,\n    attach: \"material\",\n    uColor: props.bar.color,\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Lightbar;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/Lightbar.js"],"names":["React","useRef","useState","useEffect","useThree","useFrame","lerp","Lightbar","props","bar","material","viewport","minWidth","width","maxWidth","minInterval","maxInterval","zPos","console","log","hovered","setHovered","xPos","alpha","random","lowerBound","upperBound","Math","doSomething","loop","setTimeout","current","position","x","uOpacity","e","height","color"],"mappings":"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","sourcesContent":["import React, {useRef, useState, useEffect} from 'react'\nimport {useThree, useFrame} from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\nfunction Lightbar(props) {\n    const bar = useRef()\n    const material = useRef()\n\n    const {viewport} = useThree()\n    const [minWidth, maxWidth] = [-viewport.width / 1.75, viewport.width / 1.75]\n    const [minInterval, maxInterval] = [1000, 5000]\n\n    const zPos = 1 / (props.bar.width / viewport.width)\n    console.log(zPos)\n\n    const [hovered, setHovered] = useState(false)\n\n    let xPos = 0\n    let alpha = 0\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // random position for each bar at random intervals\n    function doSomething() {\n        xPos = random(minWidth, maxWidth)\n        alpha = Math.random() / 5\n    }\n\n    ;(function loop() {\n        setTimeout(function () {\n            doSomething()\n            loop()\n        }, random(minInterval, maxInterval))\n    })()\n\n    // lerp bar to its new position\n    useFrame(() => {\n        bar.current.position.x = lerp(bar.current.position.x, xPos, 0.01)\n        if (hovered) {\n            material.current.uOpacity = 1.0\n        } else {\n            material.current.uOpacity = lerp(material.current.uOpacity, alpha, 0.01)\n        }\n    })\n\n    return (\n        <mesh\n            ref={bar}\n            onPointerOver={(e) => setHovered(true)}\n            onPointerOut={(e) => setHovered(false)}\n            position={[0, 0, 0]}\n        >\n            <planeBufferGeometry\n                attach=\"geometry\"\n                args={[props.bar.width, props.bar.height]}\n            />\n            <lightbarMaterial\n                ref={material}\n                attach=\"material\"\n                uColor={props.bar.color}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default Lightbar\n"]},"metadata":{},"sourceType":"module"}