{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/ParagraphPlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport '../materials/ImageMaskMaterial';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport state from '../../store';\nimport lerp from 'lerp';\nimport { useBlock } from '../Blocks'; // A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ParagraphPlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      props = _objectWithoutProperties(_ref, [\"color\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, props.src); // BREAKS IF THIS IS REMOVED???\n\n  var images = document.getElementsByClassName('image-plane');\n  images = Array.from(images); //convert to array\n\n  const image = images.filter(el => el.dataset.id === props.image_id)[0];\n  const imageTexture = useLoader(THREE.TextureLoader, image.src);\n  const imageSize = new THREE.Vector2(0, 0);\n  const imageOffset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        top = _image$getBoundingCli.top,\n        left = _image$getBoundingCli.left;\n\n  console.log(width, height);\n  imageSize.set(width, height);\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0);\n\n  const _useBlock = useBlock(),\n        offset = _useBlock.offset,\n        viewportHeight = _useBlock.viewportHeight;\n\n  let last = state.top.current;\n  useFrame(() => {\n    const top = state.top;\n    const scrollSpeed = top.current - last;\n    material.current.shift = lerp(material.current.shift, scrollSpeed / 150, 0.1);\n    material.current.offset = top;\n    console.log(offset * viewportHeight - top.current);\n    last = top.current;\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"imageMaskMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: imageTexture,\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default ParagraphPlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/ParagraphPlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","state","lerp","useBlock","ParagraphPlane","color","props","material","texture","TextureLoader","src","images","document","getElementsByClassName","Array","from","image","filter","el","dataset","id","image_id","imageTexture","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","top","left","console","log","set","window","innerWidth","offset","viewportHeight","last","current","scrollSpeed","shift","x","y"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport '../materials/ImageMaskMaterial'\nimport {useLoader, useFrame} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\nimport {useBlock} from '../Blocks'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ParagraphPlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, top, left} = image.getBoundingClientRect()\n\n    console.log(width, height)\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const {offset, viewportHeight} = useBlock()\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n        material.current.shift = lerp(material.current.shift, scrollSpeed / 150, 0.1)\n        material.current.offset = top\n\n        console.log(offset * viewportHeight - top.current)\n\n        last = top.current\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <imageMaskMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default ParagraphPlane\n"]},"metadata":{},"sourceType":"module"}