{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        opacity: {\n          value: 1\n        },\n        color: {\n          value: new Color('white')\n        },\n        image_texture: {\n          value: null\n        },\n        scale: {\n          value: 0\n        },\n        shift: {\n          value: 0\n        }\n      },\n      vertexShader: \"\\n                uniform float scale;\\n                uniform float shift;\\n                varying vec2 vUv;\\n\\n                float rand(vec2 co){\\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n                }\\n\\n                void main() {\\n                vec3 pos = position;\\n                //   pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\\n                pos.y += (rand(vec2(pos.x, pos.x)) * shift);\\n\\n                vUv = uv;\\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n            }\",\n      fragmentShader: \"\\n                uniform sampler2D image_texture;\\n                uniform float shift;\\n                uniform float scale;\\n                uniform vec3 color;\\n                uniform float opacity;\\n\\n                varying vec2 vUv;\\n                \\n                void main() {\\n                float angle = 1.55;\\n                vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n                vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\\n                vec4 cr = texture2D(image_texture, p + offset);\\n                vec4 cga = texture2D(image_texture, p);\\n                vec4 cb = texture2D(image_texture, p - offset);\\n\\n                vec3 outColor = vec3(cr.r, cga.g, cb.b);\\n\\n                gl_FragColor = vec4(outColor, cga.a);\\n            }\"\n    });\n  }\n\n  get color() {\n    return this.uniforms.color.value;\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value;\n  }\n\n  set map(value) {\n    this.uniforms.image_texture.value = value;\n  }\n\n  get map() {\n    return this.uniforms.image_texture.value;\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value;\n  }\n\n  get shift() {\n    return this.uniforms.shift.value;\n  }\n\n}\n\nextend({\n  CustomMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/materials/ImageMaterial.js"],"names":["ShaderMaterial","Color","extend","CustomMaterial","constructor","uniforms","opacity","value","color","image_texture","scale","shift","vertexShader","fragmentShader","map"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,KAAxB,QAAoC,OAApC;AACA,SAAQC,MAAR,QAAqB,mBAArB;;AAEA,MAAMC,cAAN,SAA6BH,cAA7B,CAA4C;AACxCI,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,OAAO,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SADH;AAENC,QAAAA,KAAK,EAAE;AAACD,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,OAAV;AAAR,SAFD;AAGNQ,QAAAA,aAAa,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAHT;AAING,QAAAA,KAAK,EAAE;AAACH,UAAAA,KAAK,EAAE;AAAR,SAJD;AAKNI,QAAAA,KAAK,EAAE;AAACJ,UAAAA,KAAK,EAAE;AAAR;AALD,OADR;AASFK,MAAAA,YAAY,unBATV;AA2BFC,MAAAA,cAAc;AA3BZ,KAAN;AAiDH;;AAED,MAAIL,KAAJ,GAAY;AACR,WAAO,KAAKH,QAAL,CAAcG,KAAd,CAAoBD,KAA3B;AACH;;AAED,MAAID,OAAJ,GAAc;AACV,WAAO,KAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAA7B;AACH;;AAED,MAAID,OAAJ,CAAYC,KAAZ,EAAmB;AACf,QAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8BA,KAA9B;AACtB;;AAED,MAAIO,GAAJ,CAAQP,KAAR,EAAe;AACX,SAAKF,QAAL,CAAcI,aAAd,CAA4BF,KAA5B,GAAoCA,KAApC;AACH;;AAED,MAAIO,GAAJ,GAAU;AACN,WAAO,KAAKT,QAAL,CAAcI,aAAd,CAA4BF,KAAnC;AACH;;AAED,MAAIG,KAAJ,CAAUH,KAAV,EAAiB;AACb,SAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;AACH;;AAED,MAAIG,KAAJ,GAAY;AACR,WAAO,KAAKL,QAAL,CAAcK,KAAd,CAAoBH,KAA3B;AACH;;AAED,MAAII,KAAJ,CAAUJ,KAAV,EAAiB;AACb,SAAKF,QAAL,CAAcM,KAAd,CAAoBJ,KAApB,GAA4BA,KAA5B;AACH;;AAED,MAAII,KAAJ,GAAY;AACR,WAAO,KAAKN,QAAL,CAAcM,KAAd,CAAoBJ,KAA3B;AACH;;AAvFuC;;AA0F5CL,MAAM,CAAC;AAACC,EAAAA;AAAD,CAAD,CAAN","sourcesContent":["import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass CustomMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                color: {value: new Color('white')},\n                image_texture: {value: null},\n                scale: {value: 0},\n                shift: {value: 0},\n            },\n\n            vertexShader: `\n                uniform float scale;\n                uniform float shift;\n                varying vec2 vUv;\n\n                float rand(vec2 co){\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n                }\n\n                void main() {\n                vec3 pos = position;\n                //   pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n                pos.y += (rand(vec2(pos.x, pos.x)) * shift);\n\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform sampler2D image_texture;\n                uniform float shift;\n                uniform float scale;\n                uniform vec3 color;\n                uniform float opacity;\n\n                varying vec2 vUv;\n                \n                void main() {\n                float angle = 1.55;\n                vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n                vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n                vec4 cr = texture2D(image_texture, p + offset);\n                vec4 cga = texture2D(image_texture, p);\n                vec4 cb = texture2D(image_texture, p - offset);\n\n                vec3 outColor = vec3(cr.r, cga.g, cb.b);\n\n                gl_FragColor = vec4(outColor, cga.a);\n            }`,\n        })\n    }\n\n    get color() {\n        return this.uniforms.color.value\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set map(value) {\n        this.uniforms.image_texture.value = value\n    }\n\n    get map() {\n        return this.uniforms.image_texture.value\n    }\n\n    set scale(value) {\n        this.uniforms.scale.value = value\n    }\n\n    get scale() {\n        return this.uniforms.scale.value\n    }\n\n    set shift(value) {\n        this.uniforms.shift.value = value\n    }\n\n    get shift() {\n        return this.uniforms.shift.value\n    }\n}\n\nextend({CustomMaterial})\n"]},"metadata":{},"sourceType":"module"}