{"ast":null,"code":"import { ShaderMaterial } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass MorphMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        opacity: {\n          value: 1\n        },\n        uTexture: {\n          value: null\n        },\n        uPreviousTexture: {\n          value: null\n        },\n        uMixValue: {\n          value: 0\n        }\n      },\n      vertexShader: \"\\n                uniform vec2 uOffset;\\n\\n                varying vec2 vUv;\\n\\n                vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) {\\n                    float M_PI = 3.1415926535897932384626433832795;\\n                    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\\n                    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\\n                    return position;\\n                }\\n\\n                void main() {\\n                    vUv =  uv;\\n                    vec3 newPosition = position;\\n                    newPosition = deformationCurve(position,uv,uOffset);\\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\\n                }\",\n      fragmentShader: \"\\n                uniform sampler2D uTexture;\\n                uniform sampler2D uPreviousTexture;\\n                uniform float opacity;\\n                uniform float uMixValue;\\n\\n                varying vec2 vUv;\\n\\n                float strength = 0.8;\\n\\n                //https://github.com/gl-transitions/gl-transitions/blob/master/transitions/morph.glsl\\n                vec3 transition(vec2 uv) {\\n                    float inv = 1.0 - uMixValue;\\n\\n                    vec4 fromColor = texture2D(uPreviousTexture, uv);\\n                    vec4 toColor = texture2D(uTexture, uv);\\n\\n                    vec2 fromOffset = (((fromColor.rg + fromColor.b) * 0.5) * 2.0 - 1.0);\\n                    vec2 toOffset = (((toColor.rg + toColor.b) * 0.5) * 2.0 - 1.0);\\n                    vec2 offset = mix(fromOffset, toOffset, 0.5) * strength;\\n                    \\n                    return mix(texture2D(uPreviousTexture, uv + offset * uMixValue).rgb, texture2D(uTexture, uv - offset * inv).rgb, uMixValue);\\n                }\\n        \\n                void main() {\\n                    vec3 trans = transition(vUv);\\n                    vec3 outColor = mix(transition(vUv), vec3(1.0 - uMixValue, 0.0, 0.0), uMixValue); \\n\\n                    gl_FragColor = vec4(outColor.rgb, opacity);\\n                }\"\n    });\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value;\n  }\n\n  set uTexture(value) {\n    this.uniforms.uTexture.value = value;\n  }\n\n  get uTexture() {\n    return this.uniforms.uTexture.value;\n  }\n\n  set uPreviousTexture(value) {\n    this.uniforms.uPreviousTexture.value = value;\n  }\n\n  get uPreviousTexture() {\n    return this.uniforms.uPreviousTexture.value;\n  }\n\n  set uMixValue(value) {\n    this.uniforms.uMixValue.value = value;\n  }\n\n  get uMixValue() {\n    return this.uniforms.uMixValue.value;\n  }\n\n}\n\nextend({\n  MorphMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/materials/MorphMaterial.js"],"names":["ShaderMaterial","extend","MorphMaterial","constructor","uniforms","opacity","value","uTexture","uPreviousTexture","uMixValue","vertexShader","fragmentShader"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,OAA7B;AACA,SAAQC,MAAR,QAAqB,mBAArB;;AAEA,MAAMC,aAAN,SAA4BF,cAA5B,CAA2C;AACvCG,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,OAAO,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SADH;AAENC,QAAAA,QAAQ,EAAE;AAACD,UAAAA,KAAK,EAAE;AAAR,SAFJ;AAGNE,QAAAA,gBAAgB,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAHZ;AAING,QAAAA,SAAS,EAAE;AAACH,UAAAA,KAAK,EAAE;AAAR;AAJL,OADR;AAQFI,MAAAA,YAAY,4uBARV;AA2BFC,MAAAA,cAAc;AA3BZ,KAAN;AA0DH;;AAED,MAAIN,OAAJ,GAAc;AACV,WAAO,KAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAA7B;AACH;;AAED,MAAID,OAAJ,CAAYC,KAAZ,EAAmB;AACf,QAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8BA,KAA9B;AACtB;;AAED,MAAIC,QAAJ,CAAaD,KAAb,EAAoB;AAChB,SAAKF,QAAL,CAAcG,QAAd,CAAuBD,KAAvB,GAA+BA,KAA/B;AACH;;AAED,MAAIC,QAAJ,GAAe;AACX,WAAO,KAAKH,QAAL,CAAcG,QAAd,CAAuBD,KAA9B;AACH;;AAED,MAAIE,gBAAJ,CAAqBF,KAArB,EAA4B;AACxB,SAAKF,QAAL,CAAcI,gBAAd,CAA+BF,KAA/B,GAAuCA,KAAvC;AACH;;AAED,MAAIE,gBAAJ,GAAuB;AACnB,WAAO,KAAKJ,QAAL,CAAcI,gBAAd,CAA+BF,KAAtC;AACH;;AAED,MAAIG,SAAJ,CAAcH,KAAd,EAAqB;AACjB,SAAKF,QAAL,CAAcK,SAAd,CAAwBH,KAAxB,GAAgCA,KAAhC;AACH;;AAED,MAAIG,SAAJ,GAAgB;AACZ,WAAO,KAAKL,QAAL,CAAcK,SAAd,CAAwBH,KAA/B;AACH;;AA5FsC;;AA+F3CL,MAAM,CAAC;AAACC,EAAAA;AAAD,CAAD,CAAN","sourcesContent":["import {ShaderMaterial} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass MorphMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                uTexture: {value: null},\n                uPreviousTexture: {value: null},\n                uMixValue: {value: 0},\n            },\n\n            vertexShader: `\n                uniform vec2 uOffset;\n\n                varying vec2 vUv;\n\n                vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) {\n                    float M_PI = 3.1415926535897932384626433832795;\n                    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n                    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n                    return position;\n                }\n\n                void main() {\n                    vUv =  uv;\n                    vec3 newPosition = position;\n                    newPosition = deformationCurve(position,uv,uOffset);\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n                }`,\n\n            fragmentShader: `\n                uniform sampler2D uTexture;\n                uniform sampler2D uPreviousTexture;\n                uniform float opacity;\n                uniform float uMixValue;\n\n                varying vec2 vUv;\n\n                float strength = 0.8;\n\n                //https://github.com/gl-transitions/gl-transitions/blob/master/transitions/morph.glsl\n                vec3 transition(vec2 uv) {\n                    float inv = 1.0 - uMixValue;\n\n                    vec4 fromColor = texture2D(uPreviousTexture, uv);\n                    vec4 toColor = texture2D(uTexture, uv);\n\n                    vec2 fromOffset = (((fromColor.rg + fromColor.b) * 0.5) * 2.0 - 1.0);\n                    vec2 toOffset = (((toColor.rg + toColor.b) * 0.5) * 2.0 - 1.0);\n                    vec2 offset = mix(fromOffset, toOffset, 0.5) * strength;\n                    \n                    return mix(texture2D(uPreviousTexture, uv + offset * uMixValue).rgb, texture2D(uTexture, uv - offset * inv).rgb, uMixValue);\n                }\n        \n                void main() {\n                    vec3 trans = transition(vUv);\n                    vec3 outColor = mix(transition(vUv), vec3(1.0 - uMixValue, 0.0, 0.0), uMixValue); \n\n                    gl_FragColor = vec4(outColor.rgb, opacity);\n                }`,\n        })\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set uTexture(value) {\n        this.uniforms.uTexture.value = value\n    }\n\n    get uTexture() {\n        return this.uniforms.uTexture.value\n    }\n\n    set uPreviousTexture(value) {\n        this.uniforms.uPreviousTexture.value = value\n    }\n\n    get uPreviousTexture() {\n        return this.uniforms.uPreviousTexture.value\n    }\n\n    set uMixValue(value) {\n        this.uniforms.uMixValue.value = value\n    }\n\n    get uMixValue() {\n        return this.uniforms.uMixValue.value\n    }\n}\n\nextend({MorphMaterial})\n"]},"metadata":{},"sourceType":"module"}