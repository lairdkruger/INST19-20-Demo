{"ast":null,"code":"import _objectWithoutProperties from\"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/Demo/INST19-20-Demo/INST19-20-Demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useRef}from'react';import*as THREE from'three';import{useLoader,useFrame,useThree}from'react-three-fiber';import state from'../../store';import lerp from'lerp';import{useBlock}from'../Blocks';import'./materials/MorphMaterial';// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\nfunction TwoImagePlane(_ref){let _ref$color=_ref.color,color=_ref$color===void 0?'white':_ref$color,props=_objectWithoutProperties(_ref,[\"color\"]);const material=useRef();const texture=useLoader(THREE.TextureLoader,props.src);// BREAKS IF THIS IS REMOVED???\nvar images=document.getElementsByClassName('image-plane');images=Array.from(images);//convert to array\nconst image=images.filter(el=>el.dataset.id===props.image_id)[0];const imageSize=new THREE.Vector2(0,0);const imageOffset=new THREE.Vector2(0,0);const _image$getBoundingCli=image.getBoundingClientRect(),width=_image$getBoundingCli.width,height=_image$getBoundingCli.height,left=_image$getBoundingCli.left;imageSize.set(width,height);imageOffset.set(left-window.innerWidth/2+width/2,0.0);const imageTexture=useLoader(THREE.TextureLoader,props.src);const previousImageTexture=useLoader(THREE.TextureLoader,props.src_prev);const _useBlock=useBlock(),viewportHeight=_useBlock.viewportHeight,offset=_useBlock.offset;useFrame(()=>{const top=state.top;const offsetMapped=Math.max(0,(offset*viewportHeight-top.current)/viewportHeight);// same lerp used in blocks.js\nmaterial.current.uMixValue=lerp(material.current.uMixValue,offsetMapped,0.1);});return/*#__PURE__*/React.createElement(\"mesh\",{position:[imageOffset.x,imageOffset.y,0],scale:[imageSize.x,imageSize.y,1]},/*#__PURE__*/React.createElement(\"planeBufferGeometry\",{attach:\"geometry\",args:[1,1,32,32]}),/*#__PURE__*/React.createElement(\"morphMaterial\",{ref:material,attach:\"material\",uTexture:imageTexture,uPreviousTexture:previousImageTexture,transparent:true}));}export default TwoImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/Demo/INST19-20-Demo/INST19-20-Demo/src/components/media/TwoImagePlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","useThree","state","lerp","useBlock","TwoImagePlane","color","props","material","texture","TextureLoader","src","images","document","getElementsByClassName","Array","from","image","filter","el","dataset","id","image_id","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","left","set","window","innerWidth","imageTexture","previousImageTexture","src_prev","viewportHeight","offset","top","offsetMapped","Math","max","current","uMixValue","x","y"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader, useFrame, useThree} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\nimport {useBlock} from '../Blocks'\n\nimport './materials/MorphMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction TwoImagePlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, props.src)\n    const previousImageTexture = useLoader(THREE.TextureLoader, props.src_prev)\n\n    const {viewportHeight, offset} = useBlock()\n\n    useFrame(() => {\n        const {top} = state\n        const offsetMapped = Math.max(\n            0,\n            (offset * viewportHeight - top.current) / viewportHeight\n        )\n\n        // same lerp used in blocks.js\n        material.current.uMixValue = lerp(material.current.uMixValue, offsetMapped, 0.1)\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <morphMaterial\n                ref={material}\n                attach=\"material\"\n                uTexture={imageTexture}\n                uPreviousTexture={previousImageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default TwoImagePlane\n"]},"metadata":{},"sourceType":"module"}