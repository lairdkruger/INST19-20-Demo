{"ast":null,"code":"import{ShaderMaterial,Color}from'three';import{extend}from'react-three-fiber';class DistortMaterial extends ShaderMaterial{constructor(){super({uniforms:{opacity:{value:1},color:{value:new Color('white')},image_texture:{value:null},scale:{value:0},shift:{value:0}},vertexShader:\"\\n                uniform float scale;\\n                uniform float shift;\\n                varying vec2 vUv;\\n\\n                float rand(vec2 co){\\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n                }\\n\\n                void main() {\\n                vec3 pos = position;\\n                //   pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\\n                // pos.y += (rand(vec2(pos.x, pos.x)) * shift);\\n\\n                vUv = uv;\\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n            }\",fragmentShader:\"\\n                uniform sampler2D image_texture;\\n                uniform float shift;\\n                uniform float scale;\\n                uniform vec3 color;\\n                uniform float opacity;\\n\\n                varying vec2 vUv;\\n                \\n                void main() {\\n                float angle = 1.55;\\n                vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n                vec2 offset = shift * vec2(cos(angle), sin(angle));\\n                vec4 cr = texture2D(image_texture, p + offset);\\n                vec4 cga = texture2D(image_texture, p);\\n                vec4 cb = texture2D(image_texture, p - offset);\\n\\n                vec3 outColor = vec3(cr.r, cga.g, cb.b);\\n\\n                gl_FragColor = vec4(outColor, cga.a);\\n            }\"});}get color(){return this.uniforms.color.value;}get opacity(){return this.uniforms.opacity.value;}set opacity(value){if(this.uniforms)this.uniforms.opacity.value=value;}set map(value){this.uniforms.image_texture.value=value;}get map(){return this.uniforms.image_texture.value;}set scale(value){this.uniforms.scale.value=value;}get scale(){return this.uniforms.scale.value;}set shift(value){this.uniforms.shift.value=value;}get shift(){return this.uniforms.shift.value;}}extend({DistortMaterial});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/Demo/INST19-20-Demo/INST19-20-Demo/src/components/media/materials/DistortMaterial.js"],"names":["ShaderMaterial","Color","extend","DistortMaterial","constructor","uniforms","opacity","value","color","image_texture","scale","shift","vertexShader","fragmentShader","map"],"mappings":"AAAA,OAAQA,cAAR,CAAwBC,KAAxB,KAAoC,OAApC,CACA,OAAQC,MAAR,KAAqB,mBAArB,CAEA,KAAMC,CAAAA,eAAN,QAA8BH,CAAAA,cAAe,CACzCI,WAAW,EAAG,CACV,MAAM,CACFC,QAAQ,CAAE,CACNC,OAAO,CAAE,CAACC,KAAK,CAAE,CAAR,CADH,CAENC,KAAK,CAAE,CAACD,KAAK,CAAE,GAAIN,CAAAA,KAAJ,CAAU,OAAV,CAAR,CAFD,CAGNQ,aAAa,CAAE,CAACF,KAAK,CAAE,IAAR,CAHT,CAING,KAAK,CAAE,CAACH,KAAK,CAAE,CAAR,CAJD,CAKNI,KAAK,CAAE,CAACJ,KAAK,CAAE,CAAR,CALD,CADR,CASFK,YAAY,ynBATV,CA2BFC,cAAc,gyBA3BZ,CAAN,EAiDH,CAED,GAAIL,CAAAA,KAAJ,EAAY,CACR,MAAO,MAAKH,QAAL,CAAcG,KAAd,CAAoBD,KAA3B,CACH,CAED,GAAID,CAAAA,OAAJ,EAAc,CACV,MAAO,MAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAA7B,CACH,CAED,GAAID,CAAAA,OAAJ,CAAYC,KAAZ,CAAmB,CACf,GAAI,KAAKF,QAAT,CAAmB,KAAKA,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,CAA8BA,KAA9B,CACtB,CAED,GAAIO,CAAAA,GAAJ,CAAQP,KAAR,CAAe,CACX,KAAKF,QAAL,CAAcI,aAAd,CAA4BF,KAA5B,CAAoCA,KAApC,CACH,CAED,GAAIO,CAAAA,GAAJ,EAAU,CACN,MAAO,MAAKT,QAAL,CAAcI,aAAd,CAA4BF,KAAnC,CACH,CAED,GAAIG,CAAAA,KAAJ,CAAUH,KAAV,CAAiB,CACb,KAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,CAA4BA,KAA5B,CACH,CAED,GAAIG,CAAAA,KAAJ,EAAY,CACR,MAAO,MAAKL,QAAL,CAAcK,KAAd,CAAoBH,KAA3B,CACH,CAED,GAAII,CAAAA,KAAJ,CAAUJ,KAAV,CAAiB,CACb,KAAKF,QAAL,CAAcM,KAAd,CAAoBJ,KAApB,CAA4BA,KAA5B,CACH,CAED,GAAII,CAAAA,KAAJ,EAAY,CACR,MAAO,MAAKN,QAAL,CAAcM,KAAd,CAAoBJ,KAA3B,CACH,CAvFwC,CA0F7CL,MAAM,CAAC,CAACC,eAAD,CAAD,CAAN","sourcesContent":["import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass DistortMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                color: {value: new Color('white')},\n                image_texture: {value: null},\n                scale: {value: 0},\n                shift: {value: 0},\n            },\n\n            vertexShader: `\n                uniform float scale;\n                uniform float shift;\n                varying vec2 vUv;\n\n                float rand(vec2 co){\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n                }\n\n                void main() {\n                vec3 pos = position;\n                //   pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n                // pos.y += (rand(vec2(pos.x, pos.x)) * shift);\n\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform sampler2D image_texture;\n                uniform float shift;\n                uniform float scale;\n                uniform vec3 color;\n                uniform float opacity;\n\n                varying vec2 vUv;\n                \n                void main() {\n                float angle = 1.55;\n                vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n                vec2 offset = shift * vec2(cos(angle), sin(angle));\n                vec4 cr = texture2D(image_texture, p + offset);\n                vec4 cga = texture2D(image_texture, p);\n                vec4 cb = texture2D(image_texture, p - offset);\n\n                vec3 outColor = vec3(cr.r, cga.g, cb.b);\n\n                gl_FragColor = vec4(outColor, cga.a);\n            }`,\n        })\n    }\n\n    get color() {\n        return this.uniforms.color.value\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set map(value) {\n        this.uniforms.image_texture.value = value\n    }\n\n    get map() {\n        return this.uniforms.image_texture.value\n    }\n\n    set scale(value) {\n        this.uniforms.scale.value = value\n    }\n\n    get scale() {\n        return this.uniforms.scale.value\n    }\n\n    set shift(value) {\n        this.uniforms.shift.value = value\n    }\n\n    get shift() {\n        return this.uniforms.shift.value\n    }\n}\n\nextend({DistortMaterial})\n"]},"metadata":{},"sourceType":"module"}