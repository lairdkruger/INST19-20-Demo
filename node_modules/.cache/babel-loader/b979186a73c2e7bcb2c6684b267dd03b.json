{"ast":null,"code":"import _slicedToArray from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useThree } from 'react-three-fiber';\nconst tempObject = new THREE.Object3D();\n\nfunction LightbarsInstanced(props) {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        hovered = _useState2[0],\n        setHovered = _useState2[1];\n\n  const ref = useRef();\n  const previous = useRef();\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const height = viewport.height;\n  const width = viewport.width / 10;\n  useEffect(() => void (previous.current = hovered), [hovered]);\n  useFrame(state => {\n    const time = state.clock.getElapsedTime();\n    let i = 0;\n\n    for (let x = 0; x < 10; x++) {\n      const id = i++;\n      tempObject.position.set(x, 0, 0);\n\n      if (hovered !== previous.current) {\n        console.log('hovered');\n        ref.current.geometry.attributes.color.needsUpdate = true;\n      }\n    }\n\n    ref.current.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: ref,\n    args: [null, null, 10],\n    onPointerMove: e => setHovered(e.instanceId),\n    onPointerOut: e => setHovered(undefined),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [10, props.bar.height],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshPhongMaterial\", {\n    attach: \"material\",\n    vertexColors: THREE.VertexColors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }));\n} //     const bars = useRef()\n//     const {viewport} = useThree()\n//     const height = viewport.height * state.pages\n//     const barsStore = [\n//         {\n//             id: 'bar1',\n//             width: viewport.width / 10,\n//             height: height,\n//             color: new Color('#F84006'),\n//         },\n//         {\n//             id: 'bar2',\n//             width: viewport.width / 8,\n//             height: height,\n//             color: new Color('#E10906'),\n//         },\n//         {\n//             id: 'bar3',\n//             width: viewport.width / 7,\n//             height: height,\n//             color: new Color('#BA0301'),\n//         },\n//         {\n//             id: 'bar4',\n//             width: viewport.width / 4,\n//             height: height,\n//             color: new Color('#7A0707'),\n//         },\n//         {\n//             id: 'bar5',\n//             width: viewport.width / 1.5,\n//             height: height,\n//             color: new Color('#450202'),\n//         },\n//         {\n//             id: 'bar6',\n//             width: viewport.width / 1.3,\n//             height: height,\n//             color: new Color('#400303'),\n//         },\n//         {\n//             id: 'bar7',\n//             width: viewport.width / 12,\n//             height: height,\n//             color: new Color('#F84006'),\n//         },\n//         {\n//             id: 'bar8',\n//             width: viewport.width / 9,\n//             height: height,\n//             color: new Color('#E10906'),\n//         },\n//         {\n//             id: 'bar9',\n//             width: viewport.width / 6,\n//             height: height,\n//             color: new Color('#BA0301'),\n//         },\n//         {\n//             id: 'bar10',\n//             width: viewport.width / 3,\n//             height: height,\n//             color: new Color('#7A0707'),\n//         },\n//         {\n//             id: 'bar11',\n//             width: viewport.width / 1.5,\n//             height: height,\n//             color: new Color('#450202'),\n//         },\n//         {\n//             id: 'bar12',\n//             width: viewport.width / 1.3,\n//             height: height,\n//             color: new Color('#400303'),\n//         },\n//         {\n//             id: 'bar13',\n//             width: viewport.width / 13,\n//             height: height,\n//             color: new Color('#FB7A29'),\n//         },\n//         {\n//             id: 'bar14',\n//             width: viewport.width / 8,\n//             height: height,\n//             color: new Color('#E10906'),\n//         },\n//         {\n//             id: 'bar15',\n//             width: viewport.width / 5,\n//             height: height,\n//             color: new Color('#BA0301'),\n//         },\n//         {\n//             id: 'bar16',\n//             width: viewport.width / 3,\n//             height: height,\n//             color: new Color('#7A0707'),\n//         },\n//         {\n//             id: 'bar17',\n//             width: viewport.width / 1.5,\n//             height: height,\n//             color: new Color('#450202'),\n//         },\n//         {\n//             id: 'bar18',\n//             width: viewport.width / 1.3,\n//             height: height,\n//             color: new Color('#400303'),\n//         },\n//     ]\n//     return (\n//         <group ref={bars} {...props}>\n//             {barsStore.map((bar) => (\n//                 <Lightbar key={bar.id} bar={bar} />\n//             ))}\n//         </group>\n//     )\n// }\n\n\nexport default LightbarsInstanced;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js"],"names":["React","useRef","useEffect","useState","THREE","useFrame","useThree","tempObject","Object3D","LightbarsInstanced","props","hovered","setHovered","ref","previous","viewport","height","width","current","state","time","clock","getElapsedTime","i","x","id","position","set","console","log","geometry","attributes","color","needsUpdate","instanceMatrix","e","instanceId","undefined","bar","VertexColors"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,mBAAjC;AAEA,MAAMC,UAAU,GAAG,IAAIH,KAAK,CAACI,QAAV,EAAnB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,oBACDP,QAAQ,EADP;AAAA;AAAA,QACxBQ,OADwB;AAAA,QACfC,UADe;;AAG/B,QAAMC,GAAG,GAAGZ,MAAM,EAAlB;AACA,QAAMa,QAAQ,GAAGb,MAAM,EAAvB;;AAJ+B,oBAMZK,QAAQ,EANI;AAAA,QAMxBS,QANwB,aAMxBA,QANwB;;AAQ/B,QAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAT,GAAiB,EAA/B;AAEAf,EAAAA,SAAS,CAAC,MAAM,MAAMY,QAAQ,CAACI,OAAT,GAAmBP,OAAzB,CAAP,EAA0C,CAACA,OAAD,CAA1C,CAAT;AAEAN,EAAAA,QAAQ,CAAEc,KAAD,IAAW;AAChB,UAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAYC,cAAZ,EAAb;AAEA,QAAIC,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,YAAMC,EAAE,GAAGF,CAAC,EAAZ;AACAhB,MAAAA,UAAU,CAACmB,QAAX,CAAoBC,GAApB,CAAwBH,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;;AAEA,UAAIb,OAAO,KAAKG,QAAQ,CAACI,OAAzB,EAAkC;AAC9BU,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAhB,QAAAA,GAAG,CAACK,OAAJ,CAAYY,QAAZ,CAAqBC,UAArB,CAAgCC,KAAhC,CAAsCC,WAAtC,GAAoD,IAApD;AACH;AACJ;;AACDpB,IAAAA,GAAG,CAACK,OAAJ,CAAYgB,cAAZ,CAA2BD,WAA3B,GAAyC,IAAzC;AACH,GAdO,CAAR;AAgBA,sBACI;AACI,IAAA,GAAG,EAAEpB,GADT;AAEI,IAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,EAAb,CAFV;AAGI,IAAA,aAAa,EAAGsB,CAAD,IAAOvB,UAAU,CAACuB,CAAC,CAACC,UAAH,CAHpC;AAII,IAAA,YAAY,EAAGD,CAAD,IAAOvB,UAAU,CAACyB,SAAD,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,EAAD,EAAK3B,KAAK,CAAC4B,GAAN,CAAUtB,MAAf,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,YAAY,EAAEZ,KAAK,CAACmC,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAWH,C,CAED;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe9B,kBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport * as THREE from 'three'\nimport {useFrame, useThree} from 'react-three-fiber'\n\nconst tempObject = new THREE.Object3D()\n\nfunction LightbarsInstanced(props) {\n    const [hovered, setHovered] = useState()\n\n    const ref = useRef()\n    const previous = useRef()\n\n    const {viewport} = useThree()\n\n    const height = viewport.height\n    const width = viewport.width / 10\n\n    useEffect(() => void (previous.current = hovered), [hovered])\n\n    useFrame((state) => {\n        const time = state.clock.getElapsedTime()\n\n        let i = 0\n        for (let x = 0; x < 10; x++) {\n            const id = i++\n            tempObject.position.set(x, 0, 0)\n\n            if (hovered !== previous.current) {\n                console.log('hovered')\n                ref.current.geometry.attributes.color.needsUpdate = true\n            }\n        }\n        ref.current.instanceMatrix.needsUpdate = true\n    })\n\n    return (\n        <instancedMesh\n            ref={ref}\n            args={[null, null, 10]}\n            onPointerMove={(e) => setHovered(e.instanceId)}\n            onPointerOut={(e) => setHovered(undefined)}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[10, props.bar.height]} />\n            <meshPhongMaterial attach=\"material\" vertexColors={THREE.VertexColors} />\n        </instancedMesh>\n    )\n}\n\n//     const bars = useRef()\n\n//     const {viewport} = useThree()\n\n//     const height = viewport.height * state.pages\n\n//     const barsStore = [\n//         {\n//             id: 'bar1',\n//             width: viewport.width / 10,\n//             height: height,\n//             color: new Color('#F84006'),\n//         },\n//         {\n//             id: 'bar2',\n//             width: viewport.width / 8,\n//             height: height,\n//             color: new Color('#E10906'),\n//         },\n//         {\n//             id: 'bar3',\n//             width: viewport.width / 7,\n//             height: height,\n//             color: new Color('#BA0301'),\n//         },\n//         {\n//             id: 'bar4',\n//             width: viewport.width / 4,\n//             height: height,\n//             color: new Color('#7A0707'),\n//         },\n//         {\n//             id: 'bar5',\n//             width: viewport.width / 1.5,\n//             height: height,\n//             color: new Color('#450202'),\n//         },\n//         {\n//             id: 'bar6',\n//             width: viewport.width / 1.3,\n//             height: height,\n//             color: new Color('#400303'),\n//         },\n\n//         {\n//             id: 'bar7',\n//             width: viewport.width / 12,\n//             height: height,\n//             color: new Color('#F84006'),\n//         },\n//         {\n//             id: 'bar8',\n//             width: viewport.width / 9,\n//             height: height,\n//             color: new Color('#E10906'),\n//         },\n//         {\n//             id: 'bar9',\n//             width: viewport.width / 6,\n//             height: height,\n//             color: new Color('#BA0301'),\n//         },\n//         {\n//             id: 'bar10',\n//             width: viewport.width / 3,\n//             height: height,\n//             color: new Color('#7A0707'),\n//         },\n//         {\n//             id: 'bar11',\n//             width: viewport.width / 1.5,\n//             height: height,\n//             color: new Color('#450202'),\n//         },\n//         {\n//             id: 'bar12',\n//             width: viewport.width / 1.3,\n//             height: height,\n//             color: new Color('#400303'),\n//         },\n//         {\n//             id: 'bar13',\n//             width: viewport.width / 13,\n//             height: height,\n//             color: new Color('#FB7A29'),\n//         },\n//         {\n//             id: 'bar14',\n//             width: viewport.width / 8,\n//             height: height,\n//             color: new Color('#E10906'),\n//         },\n//         {\n//             id: 'bar15',\n//             width: viewport.width / 5,\n//             height: height,\n//             color: new Color('#BA0301'),\n//         },\n//         {\n//             id: 'bar16',\n//             width: viewport.width / 3,\n//             height: height,\n//             color: new Color('#7A0707'),\n//         },\n//         {\n//             id: 'bar17',\n//             width: viewport.width / 1.5,\n//             height: height,\n//             color: new Color('#450202'),\n//         },\n//         {\n//             id: 'bar18',\n//             width: viewport.width / 1.3,\n//             height: height,\n//             color: new Color('#400303'),\n//         },\n//     ]\n\n//     return (\n//         <group ref={bars} {...props}>\n//             {barsStore.map((bar) => (\n//                 <Lightbar key={bar.id} bar={bar} />\n//             ))}\n//         </group>\n//     )\n// }\n\nexport default LightbarsInstanced\n"]},"metadata":{},"sourceType":"module"}