{"ast":null,"code":"import _objectWithoutProperties from \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/ImagePlane.js\";\nimport React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport { useLoader, useFrame, useThree } from 'react-three-fiber';\nimport state from '../../store';\nimport lerp from 'lerp';\nimport './materials/BasicMaterial';\nimport './materials/DistortMaterial'; // A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane(_ref) {\n  let _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      props = _objectWithoutProperties(_ref, [\"color\"]);\n\n  const material = useRef();\n  const texture = useLoader(THREE.TextureLoader, props.src); // BREAKS IF THIS IS REMOVED???\n\n  var images = document.getElementsByClassName('image-plane');\n  images = Array.from(images); //convert to array\n\n  const image = images.filter(el => el.dataset.id === props.image_id)[0];\n  const imageSize = new THREE.Vector2(0, 0);\n  const imageOffset = new THREE.Vector2(0, 0);\n\n  const _image$getBoundingCli = image.getBoundingClientRect(),\n        width = _image$getBoundingCli.width,\n        height = _image$getBoundingCli.height,\n        left = _image$getBoundingCli.left;\n\n  imageSize.set(width, height);\n  imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0);\n  const imageTexture = useLoader(THREE.TextureLoader, image.src);\n  let last = state.top.current;\n  useFrame(() => {\n    const top = state.top;\n    const scrollSpeed = top.current - last;\n    material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05);\n    last = top.current;\n  });\n  let activeMaterial;\n\n  if (props.material === 'distort') {\n    activeMaterial = /*#__PURE__*/React.createElement(\"distortMaterial\", {\n      ref: material,\n      attach: \"material\",\n      color: color,\n      map: imageTexture,\n      transparent: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    });\n  } else {\n    activeMaterial = /*#__PURE__*/React.createElement(\"basicMaterial\", {\n      ref: material,\n      attach: \"material\",\n      color: color,\n      map: imageTexture,\n      transparent: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [imageOffset.x, imageOffset.y, 0],\n    scale: [imageSize.x, imageSize.y, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 32, 32],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), activeMaterial);\n}\n\nexport default ImagePlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/ImagePlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","useThree","state","lerp","ImagePlane","color","props","material","texture","TextureLoader","src","images","document","getElementsByClassName","Array","from","image","filter","el","dataset","id","image_id","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","left","set","window","innerWidth","imageTexture","last","top","current","scrollSpeed","shift","activeMaterial","x","y"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader, useFrame, useThree} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\n\nimport './materials/BasicMaterial'\nimport './materials/DistortMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n\n        material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05)\n        last = top.current\n    })\n\n    let activeMaterial\n\n    if (props.material === 'distort') {\n        activeMaterial = (\n            <distortMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n                transparent={true}\n            />\n        )\n    } else {\n        activeMaterial = (\n            <basicMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n                transparent={true}\n            />\n        )\n    }\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            {activeMaterial}\n        </mesh>\n    )\n}\n\nexport default ImagePlane\n"]},"metadata":{},"sourceType":"module"}