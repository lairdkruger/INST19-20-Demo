{"ast":null,"code":"import { ShaderMaterial, Color } from 'three';\nimport { extend } from 'react-three-fiber';\n\nclass TypeMaskMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uOpacity: {\n          value: 1\n        },\n        uColor: {\n          value: new Color('white')\n        },\n        uTexture: {\n          value: null\n        },\n        uTime: {\n          value: 0\n        }\n      },\n      vertexShader: \"\\n            varying vec2 vUv;\\n            varying vec3 vPos;\\n          \\n            void main() {\\n              vUv = uv;\\n              vPos = position;\\n          \\n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\\n              }\",\n      fragmentShader: \"\\n            varying vec2 vUv;\\n            varying vec3 vPos;\\n          \\n            uniform sampler2D uTexture;\\n            uniform float uTime;\\n          \\n            void main() {\\n              float time = uTime * 0.001;\\n              vec2 repeat = vec2(1., 1.);\\n              float stretch = 2.0; // Use to stretch text vertically\\n              // To repeat the uvs we need to multiply them by a scalar\\n              // and then get the fractional part of it so they from 0 to 1\\n              // To move them continuously we have to add time\\n              // to the x or y component, to change the direction\\n              vec2 uv = fract(vUv * repeat - vec2(time, 0.)); // The sign of time change direction of movement\\n              uv = vec2(uv.x, uv.y * 1.0 / stretch + 0.5 - (1.0 / stretch) * 0.5); // Stretch text texture vertically to fill square\\n              \\n              // Fake shadow\\n              float shadow = clamp(vPos.z / 5., 0., 1.);\\n          \\n              vec3 texture = texture2D(uTexture, uv).rgb;\\n              // texture *= vec3(uv.x, uv.y, 1.); // To help visualize the repeated uvs\\n          \\n              gl_FragColor = vec4(1.0 - texture, 1.);\\n              }\"\n    });\n  }\n\n  get uColor() {\n    return this.uniforms.uColor.value;\n  }\n\n  get uOpacity() {\n    return this.uniforms.uOpacity.value;\n  }\n\n  set uOpacity(value) {\n    if (this.uniforms) this.uniforms.uOpacity.value = value;\n  }\n\n  set uTexture(value) {\n    this.uniforms.uTexture.value = value;\n  }\n\n  get uTexture() {\n    return this.uniforms.uTexture.value;\n  }\n\n  set uTime(value) {\n    this.uniforms.uTime.value = value;\n  }\n\n  get uTime() {\n    return this.uniforms.uTime.value;\n  }\n\n}\n\nextend({\n  TypeMaskMaterial\n});","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/materials/TypeMaskMaterial.js"],"names":["ShaderMaterial","Color","extend","TypeMaskMaterial","constructor","uniforms","uOpacity","value","uColor","uTexture","uTime","vertexShader","fragmentShader"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,KAAxB,QAAoC,OAApC;AACA,SAAQC,MAAR,QAAqB,mBAArB;;AAEA,MAAMC,gBAAN,SAA+BH,cAA/B,CAA8C;AAC1CI,EAAAA,WAAW,GAAG;AACV,UAAM;AACFC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,QAAQ,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SADJ;AAENC,QAAAA,MAAM,EAAE;AAACD,UAAAA,KAAK,EAAE,IAAIN,KAAJ,CAAU,OAAV;AAAR,SAFF;AAGNQ,QAAAA,QAAQ,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAHJ;AAING,QAAAA,KAAK,EAAE;AAACH,UAAAA,KAAK,EAAE;AAAR;AAJD,OADR;AAQFI,MAAAA,YAAY,sRARV;AAmBFC,MAAAA,cAAc;AAnBZ,KAAN;AA8CH;;AAED,MAAIJ,MAAJ,GAAa;AACT,WAAO,KAAKH,QAAL,CAAcG,MAAd,CAAqBD,KAA5B;AACH;;AAED,MAAID,QAAJ,GAAe;AACX,WAAO,KAAKD,QAAL,CAAcC,QAAd,CAAuBC,KAA9B;AACH;;AAED,MAAID,QAAJ,CAAaC,KAAb,EAAoB;AAChB,QAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcC,QAAd,CAAuBC,KAAvB,GAA+BA,KAA/B;AACtB;;AAED,MAAIE,QAAJ,CAAaF,KAAb,EAAoB;AAChB,SAAKF,QAAL,CAAcI,QAAd,CAAuBF,KAAvB,GAA+BA,KAA/B;AACH;;AAED,MAAIE,QAAJ,GAAe;AACX,WAAO,KAAKJ,QAAL,CAAcI,QAAd,CAAuBF,KAA9B;AACH;;AAED,MAAIG,KAAJ,CAAUH,KAAV,EAAiB;AACb,SAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;AACH;;AAED,MAAIG,KAAJ,GAAY;AACR,WAAO,KAAKL,QAAL,CAAcK,KAAd,CAAoBH,KAA3B;AACH;;AA5EyC;;AA+E9CL,MAAM,CAAC;AAACC,EAAAA;AAAD,CAAD,CAAN","sourcesContent":["import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass TypeMaskMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uOpacity: {value: 1},\n                uColor: {value: new Color('white')},\n                uTexture: {value: null},\n                uTime: {value: 0},\n            },\n\n            vertexShader: `\n            varying vec2 vUv;\n            varying vec3 vPos;\n          \n            void main() {\n              vUv = uv;\n              vPos = position;\n          \n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n              }`,\n\n            fragmentShader: `\n            varying vec2 vUv;\n            varying vec3 vPos;\n          \n            uniform sampler2D uTexture;\n            uniform float uTime;\n          \n            void main() {\n              float time = uTime * 0.001;\n              vec2 repeat = vec2(1., 1.);\n              float stretch = 2.0; // Use to stretch text vertically\n              // To repeat the uvs we need to multiply them by a scalar\n              // and then get the fractional part of it so they from 0 to 1\n              // To move them continuously we have to add time\n              // to the x or y component, to change the direction\n              vec2 uv = fract(vUv * repeat - vec2(time, 0.)); // The sign of time change direction of movement\n              uv = vec2(uv.x, uv.y * 1.0 / stretch + 0.5 - (1.0 / stretch) * 0.5); // Stretch text texture vertically to fill square\n              \n              // Fake shadow\n              float shadow = clamp(vPos.z / 5., 0., 1.);\n          \n              vec3 texture = texture2D(uTexture, uv).rgb;\n              // texture *= vec3(uv.x, uv.y, 1.); // To help visualize the repeated uvs\n          \n              gl_FragColor = vec4(1.0 - texture, 1.);\n              }`,\n        })\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n\n    get uOpacity() {\n        return this.uniforms.uOpacity.value\n    }\n\n    set uOpacity(value) {\n        if (this.uniforms) this.uniforms.uOpacity.value = value\n    }\n\n    set uTexture(value) {\n        this.uniforms.uTexture.value = value\n    }\n\n    get uTexture() {\n        return this.uniforms.uTexture.value\n    }\n\n    set uTime(value) {\n        this.uniforms.uTime.value = value\n    }\n\n    get uTime() {\n        return this.uniforms.uTime.value\n    }\n}\n\nextend({TypeMaskMaterial})\n"]},"metadata":{},"sourceType":"module"}