{"ast":null,"code":"import _objectWithoutProperties from\"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useRef}from'react';import*as THREE from'three';import{useLoader,useFrame}from'react-three-fiber';import state from'../../store';import lerp from'lerp';import'./materials/DistortMaterial';// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\nfunction DistortPlane(_ref){let _ref$color=_ref.color,color=_ref$color===void 0?'white':_ref$color,props=_objectWithoutProperties(_ref,[\"color\"]);const material=useRef();const texture=useLoader(THREE.TextureLoader,props.src);// BREAKS IF THIS IS REMOVED???\nvar images=document.getElementsByClassName('image-plane');images=Array.from(images);//convert to array\nconst image=images.filter(el=>el.dataset.id===props.image_id)[0];const imageSize=new THREE.Vector2(0,0);const imageOffset=new THREE.Vector2(0,0);const _image$getBoundingCli=image.getBoundingClientRect(),width=_image$getBoundingCli.width,height=_image$getBoundingCli.height,left=_image$getBoundingCli.left;imageSize.set(width,height);imageOffset.set(left-window.innerWidth/2+width/2,0.0);const imageTexture=useLoader(THREE.TextureLoader,image.src);let last=state.top.current;useFrame(()=>{const top=state.top;const scrollSpeed=top.current-last;material.current.shift=lerp(material.current.shift,-scrollSpeed/150,0.05);last=top.current;});return/*#__PURE__*/React.createElement(\"mesh\",{position:[imageOffset.x,imageOffset.y,0],scale:[imageSize.x,imageSize.y,1]},/*#__PURE__*/React.createElement(\"planeBufferGeometry\",{attach:\"geometry\",args:[1,1,32,32]}),/*#__PURE__*/React.createElement(\"distortMaterial\",{ref:material,attach:\"material\",color:color,map:imageTexture,transparent:true}));}export default DistortPlane;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/media/DistortPlane.js"],"names":["React","useRef","THREE","useLoader","useFrame","state","lerp","DistortPlane","color","props","material","texture","TextureLoader","src","images","document","getElementsByClassName","Array","from","image","filter","el","dataset","id","image_id","imageSize","Vector2","imageOffset","getBoundingClientRect","width","height","left","set","window","innerWidth","imageTexture","last","top","current","scrollSpeed","shift","x","y"],"mappings":"0NAAA,MAAOA,CAAAA,KAAP,EAAeC,MAAf,KAA4B,OAA5B,CACA,MAAO,GAAKC,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAAQC,SAAR,CAAmBC,QAAnB,KAAkC,mBAAlC,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,MAAO,6BAAP,CAEA;AACA;AAEA,QAASC,CAAAA,YAAT,MAAmD,qBAA5BC,KAA4B,CAA5BA,KAA4B,qBAApB,OAAoB,YAARC,KAAQ,0CAC/C,KAAMC,CAAAA,QAAQ,CAAGT,MAAM,EAAvB,CACA,KAAMU,CAAAA,OAAO,CAAGR,SAAS,CAACD,KAAK,CAACU,aAAP,CAAsBH,KAAK,CAACI,GAA5B,CAAzB,CAA0D;AAC1D,GAAIC,CAAAA,MAAM,CAAGC,QAAQ,CAACC,sBAAT,CAAgC,aAAhC,CAAb,CACAF,MAAM,CAAGG,KAAK,CAACC,IAAN,CAAWJ,MAAX,CAAT,CAA4B;AAE5B,KAAMK,CAAAA,KAAK,CAAGL,MAAM,CAACM,MAAP,CAAeC,EAAD,EAAQA,EAAE,CAACC,OAAH,CAAWC,EAAX,GAAkBd,KAAK,CAACe,QAA9C,EAAwD,CAAxD,CAAd,CAEA,KAAMC,CAAAA,SAAS,CAAG,GAAIvB,CAAAA,KAAK,CAACwB,OAAV,CAAkB,CAAlB,CAAqB,CAArB,CAAlB,CACA,KAAMC,CAAAA,WAAW,CAAG,GAAIzB,CAAAA,KAAK,CAACwB,OAAV,CAAkB,CAAlB,CAAqB,CAArB,CAApB,CAT+C,4BAWjBP,KAAK,CAACS,qBAAN,EAXiB,CAWxCC,KAXwC,uBAWxCA,KAXwC,CAWjCC,MAXiC,uBAWjCA,MAXiC,CAWzBC,IAXyB,uBAWzBA,IAXyB,CAa/CN,SAAS,CAACO,GAAV,CAAcH,KAAd,CAAqBC,MAArB,EACAH,WAAW,CAACK,GAAZ,CAAgBD,IAAI,CAAGE,MAAM,CAACC,UAAP,CAAoB,CAA3B,CAA+BL,KAAK,CAAG,CAAvD,CAA0D,GAA1D,EAEA,KAAMM,CAAAA,YAAY,CAAGhC,SAAS,CAACD,KAAK,CAACU,aAAP,CAAsBO,KAAK,CAACN,GAA5B,CAA9B,CAEA,GAAIuB,CAAAA,IAAI,CAAG/B,KAAK,CAACgC,GAAN,CAAUC,OAArB,CACAlC,QAAQ,CAAC,IAAM,MACJiC,CAAAA,GADI,CACGhC,KADH,CACJgC,GADI,CAEX,KAAME,CAAAA,WAAW,CAAGF,GAAG,CAACC,OAAJ,CAAcF,IAAlC,CAEA1B,QAAQ,CAAC4B,OAAT,CAAiBE,KAAjB,CAAyBlC,IAAI,CAACI,QAAQ,CAAC4B,OAAT,CAAiBE,KAAlB,CAAyB,CAACD,WAAD,CAAe,GAAxC,CAA6C,IAA7C,CAA7B,CACAH,IAAI,CAAGC,GAAG,CAACC,OAAX,CACH,CANO,CAAR,CAQA,mBACI,4BACI,QAAQ,CAAE,CAACX,WAAW,CAACc,CAAb,CAAgBd,WAAW,CAACe,CAA5B,CAA+B,CAA/B,CADd,CAEI,KAAK,CAAE,CAACjB,SAAS,CAACgB,CAAX,CAAchB,SAAS,CAACiB,CAAxB,CAA2B,CAA3B,CAFX,eAII,2CAAqB,MAAM,CAAC,UAA5B,CAAuC,IAAI,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAW,EAAX,CAA7C,EAJJ,cAKI,uCACI,GAAG,CAAEhC,QADT,CAEI,MAAM,CAAC,UAFX,CAGI,KAAK,CAAEF,KAHX,CAII,GAAG,CAAE2B,YAJT,CAKI,WAAW,CAAE,IALjB,EALJ,CADJ,CAeH,CAED,cAAe5B,CAAAA,YAAf","sourcesContent":["import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader, useFrame} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\n\nimport './materials/DistortMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction DistortPlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n\n        material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05)\n        last = top.current\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <distortMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default DistortPlane\n"]},"metadata":{},"sourceType":"module"}