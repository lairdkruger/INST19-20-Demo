{"ast":null,"code":"var _jsxFileName = \"/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { useFrame, useThree } from 'react-three-fiber';\nimport '../materials/LightbarMaterial'; // re-use for instance computations\n\nconst tempObject = new THREE.Object3D();\n\nfunction LightbarsInstanced(props) {\n  const meshRef = useRef();\n  const material = useRef();\n  const numPoints = 10;\n\n  const _useThree = useThree(),\n        viewport = _useThree.viewport;\n\n  const barWidth = viewport.width / 10;\n  const barHeight = viewport.height;\n  const minXPos = -viewport.width / 1.75,\n        maxXPos = viewport.width / 1.75; // returns random float between lower and upper bounds\n\n  function random(lowerBound, upperBound) {\n    return lowerBound + Math.random() * (upperBound + 1 - lowerBound);\n  } // update instance matrices only when needed\n\n\n  React.useEffect(() => {\n    const mesh = meshRef.current; // set the transform matrix for each instance\n\n    for (let i = 0; i < numPoints; ++i) {\n      const x = random();\n      const y = Math.floor(i / 30) * 1.05;\n      const z = 0;\n      tempObject.position.set(x, y, z);\n      tempObject.rotation.set(0.5 * Math.PI, 0, 0); // cylinders face z direction\n\n      tempObject.updateMatrix();\n      mesh.setMatrixAt(i, tempObject.matrix);\n    }\n\n    mesh.instanceMatrix.needsUpdate = true;\n  }, [numPoints]);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numPoints],\n    frustumCulled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [barWidth, barHeight, barWidth],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"lightbarMaterial\", {\n    ref: material,\n    attach: \"material\",\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default LightbarsInstanced;","map":{"version":3,"sources":["/Users/lairdkruger/Documents/Web Development/Work/inst19-20/Sites/INST19/INST19/src/components/objects/LightbarsInstanced.js"],"names":["React","useRef","useEffect","useState","THREE","useFrame","useThree","tempObject","Object3D","LightbarsInstanced","props","meshRef","material","numPoints","viewport","barWidth","width","barHeight","height","minXPos","maxXPos","random","lowerBound","upperBound","Math","mesh","current","i","x","y","floor","z","position","set","rotation","PI","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,mBAAjC;AAEA,OAAO,+BAAP,C,CAEA;;AACA,MAAMC,UAAU,GAAG,IAAIH,KAAK,CAACI,QAAV,EAAnB;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,QAAMC,OAAO,GAAGV,MAAM,EAAtB;AACA,QAAMW,QAAQ,GAAGX,MAAM,EAAvB;AACA,QAAMY,SAAS,GAAG,EAAlB;;AAH+B,oBAKZP,QAAQ,EALI;AAAA,QAKxBQ,QALwB,aAKxBA,QALwB;;AAM/B,QAAMC,QAAQ,GAAGD,QAAQ,CAACE,KAAT,GAAiB,EAAlC;AACA,QAAMC,SAAS,GAAGH,QAAQ,CAACI,MAA3B;AAP+B,QAQxBC,OARwB,GAQH,CAACL,QAAQ,CAACE,KAAV,GAAkB,IARf;AAAA,QAQfI,OARe,GAQqBN,QAAQ,CAACE,KAAT,GAAiB,IARtC,EAU/B;;AACA,WAASK,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwC;AACpC,WAAOD,UAAU,GAAGE,IAAI,CAACH,MAAL,MAAiBE,UAAU,GAAG,CAAb,GAAiBD,UAAlC,CAApB;AACH,GAb8B,CAe/B;;;AACAtB,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClB,UAAMuB,IAAI,GAAGd,OAAO,CAACe,OAArB,CADkB,CAGlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,SAApB,EAA+B,EAAEc,CAAjC,EAAoC;AAChC,YAAMC,CAAC,GAAGP,MAAM,EAAhB;AACA,YAAMQ,CAAC,GAAGL,IAAI,CAACM,KAAL,CAAWH,CAAC,GAAG,EAAf,IAAqB,IAA/B;AACA,YAAMI,CAAC,GAAG,CAAV;AAEAxB,MAAAA,UAAU,CAACyB,QAAX,CAAoBC,GAApB,CAAwBL,CAAxB,EAA2BC,CAA3B,EAA8BE,CAA9B;AACAxB,MAAAA,UAAU,CAAC2B,QAAX,CAAoBD,GAApB,CAAwB,MAAMT,IAAI,CAACW,EAAnC,EAAuC,CAAvC,EAA0C,CAA1C,EANgC,CAMa;;AAC7C5B,MAAAA,UAAU,CAAC6B,YAAX;AACAX,MAAAA,IAAI,CAACY,WAAL,CAAiBV,CAAjB,EAAoBpB,UAAU,CAAC+B,MAA/B;AACH;;AAEDb,IAAAA,IAAI,CAACc,cAAL,CAAoBC,WAApB,GAAkC,IAAlC;AACH,GAhBD,EAgBG,CAAC3B,SAAD,CAhBH;AAkBA,sBACI;AAAe,IAAA,GAAG,EAAEF,OAApB;AAA6B,IAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAaE,SAAb,CAAnC;AAA4D,IAAA,aAAa,EAAE,KAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAE,CAACE,QAAD,EAAWE,SAAX,EAAsBF,QAAtB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAkB,IAAA,GAAG,EAAEH,QAAvB;AAAiC,IAAA,MAAM,EAAC,UAAxC;AAAmD,IAAA,WAAW,EAAE,IAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;;AAED,eAAeH,kBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport * as THREE from 'three'\nimport {useFrame, useThree} from 'react-three-fiber'\n\nimport '../materials/LightbarMaterial'\n\n// re-use for instance computations\nconst tempObject = new THREE.Object3D()\n\nfunction LightbarsInstanced(props) {\n    const meshRef = useRef()\n    const material = useRef()\n    const numPoints = 10\n\n    const {viewport} = useThree()\n    const barWidth = viewport.width / 10\n    const barHeight = viewport.height\n    const [minXPos, maxXPos] = [-viewport.width / 1.75, viewport.width / 1.75]\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // update instance matrices only when needed\n    React.useEffect(() => {\n        const mesh = meshRef.current\n\n        // set the transform matrix for each instance\n        for (let i = 0; i < numPoints; ++i) {\n            const x = random()\n            const y = Math.floor(i / 30) * 1.05\n            const z = 0\n\n            tempObject.position.set(x, y, z)\n            tempObject.rotation.set(0.5 * Math.PI, 0, 0) // cylinders face z direction\n            tempObject.updateMatrix()\n            mesh.setMatrixAt(i, tempObject.matrix)\n        }\n\n        mesh.instanceMatrix.needsUpdate = true\n    }, [numPoints])\n\n    return (\n        <instancedMesh ref={meshRef} args={[null, null, numPoints]} frustumCulled={false}>\n            <boxBufferGeometry attach=\"geometry\" args={[barWidth, barHeight, barWidth]} />\n            <lightbarMaterial ref={material} attach=\"material\" transparent={true} />\n        </instancedMesh>\n    )\n}\n\nexport default LightbarsInstanced\n"]},"metadata":{},"sourceType":"module"}