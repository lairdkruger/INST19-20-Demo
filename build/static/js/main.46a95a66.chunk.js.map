{"version":3,"sources":["store.js","components/Blocks.js","components/HtmlContent.js","components/lighting/FlatLighting.js","components/postprocessing/Postprocessing.js","components/materials/SmokeMaterial.js","components/objects/Storm.js","components/materials/LightbarMaterial.js","components/objects/Lightbar.js","components/objects/Lightbars.js","components/materials/ImageMaterial.js","components/media/ImagePlane.js","components/materials/TransitionMaterial.js","components/objects/TransitionPlane.js","components/objects/BackgroundPlane.js","components/materials/VignetteMaterial.js","components/objects/VignettePlane.js","index.js"],"names":["state","sections","pages","zoom","top","createRef","offsetContext","createContext","Block","children","offset","factor","props","useThree","size","viewport","useContext","viewportWidth","width","viewportHeight","height","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","sectionHeight","aspect","useBlock","parentOffset","ref","useRef","undefined","useFrame","curY","current","position","y","curTop","lerp","Provider","value","HtmlContent","className","style","portal","left","FlatLighting","intensity","angle","penumbra","Postprocessing","gl","scene","camera","composer","useMemo","EffectComposer","addPass","RenderPass","bloomEffect","BloomEffect","luminanceThreshold","luminanceSmoothing","effectPass","NoiseEffect","premultiply","EffectPass","renderToScreen","useEffect","setSize","_","delta","render","SmokeMaterial","ShaderMaterial","constructor","super","uniforms","time","lowFreqAmp","midFreqAmp","highFreqAmp","smokeColor1","Color","smokeColor2","wireColor1","wireColor2","isWire","vertexShader","fragmentShader","this","extend","Storm","smoke","wire","smokeMaterial","wireMaterial","radius","Math","max","last","start","Date","now","scrollSpeed","abs","args","attach","transparent","wireframe","LightbarMaterial","uColor","uOpacity","uTime","uShift","Lightbar","bar","material","minWidth","maxWidth","zPos","useState","hovered","setHovered","xPos","alpha","random","lowerBound","upperBound","loop","setTimeout","x","onPointerOver","e","onPointerOut","color","Lightbars","bars","barsStore","id","map","key","CustomMaterial","opacity","image_texture","scale","shift","ImagePlane","useLoader","THREE","src","images","document","getElementsByClassName","image","Array","from","filter","el","dataset","image_id","imageSize","imageOffset","getBoundingClientRect","set","window","innerWidth","imageTexture","TransitionMaterial","TransitionPlane","toneMapped","BackgroundPlane","VignetteMaterial","VignettePlane","App","events","setEvents","domContent","scrollArea","onScroll","target","scrollTop","fov","atan","innerHeight","PI","powerPreference","antialias","stencil","depth","onCreated","data-id","alt","fallback","querySelector"],"mappings":"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","file":"static/js/main.46a95a66.chunk.js","sourcesContent":["import {createRef} from 'react'\n\n// sections: how many block sections there are\n// pages: length of the scroll area (1 = 1vh)\nconst state = {\n    sections: 4,\n    pages: 4,\n    zoom: 1,\n    top: createRef(),\n}\n\nexport default state\n","import React, {createContext, useRef, useContext} from 'react'\nimport {useFrame, useThree} from 'react-three-fiber'\nimport lerp from 'lerp'\nimport state from '../store'\n\n// Nestable content block for a declarative scroll rig\n// Based on Paul Henschel's work:\n// https://tympanus.net/codrops/2019/12/16/scroll-refraction-and-shader-effects-in-three-js-and-react/\n\n// Offset: section index (eg: offset = 2 will be the third content section)\n// Factor: sets block's speed and direction when page is scrolled\n\nconst offsetContext = createContext(0)\n\nfunction Block({children, offset, factor, ...props}) {\n    // Fetch parent offset and the height of a single section\n    const {offset: parentOffset, sectionHeight, aspect} = useBlock()\n    const ref = useRef()\n    offset = offset !== undefined ? offset : parentOffset\n    // Runs every frame and lerps the inner block into its place\n    useFrame(() => {\n        const curY = ref.current.position.y\n        const curTop = state.top.current / aspect\n        ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n    })\n\n    return (\n        <offsetContext.Provider value={offset}>\n            <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n                <group ref={ref}>{children}</group>\n            </group>\n        </offsetContext.Provider>\n    )\n}\n\nfunction useBlock() {\n    const {sections, pages, zoom} = state\n    const {size, viewport} = useThree()\n    const offset = useContext(offsetContext)\n    const viewportWidth = viewport.width\n    const viewportHeight = viewport.height\n    const canvasWidth = viewportWidth / zoom\n    const canvasHeight = viewportHeight / zoom\n    const mobile = size.width < 700\n    const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n    const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n    const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n    const aspect = size.height / viewportHeight\n    return {\n        aspect,\n        viewport,\n        offset,\n        viewportWidth,\n        viewportHeight,\n        canvasWidth,\n        canvasHeight,\n        mobile,\n        margin,\n        contentMaxWidth,\n        sectionHeight,\n    }\n}\n\nexport {Block, useBlock}\n","import React from 'react'\nimport { useThree } from 'react-three-fiber'\nimport { HTML } from 'drei'\n\n// drei component tying html elements to any object in a scene\n// portal: target container\n\nfunction HtmlContent({ className, style, children, portal }) {\n  const { size } = useThree()\n  return (\n    <HTML\n      portal={portal}\n      style={{\n        position: 'absolute',\n        top: -size.height / 2,\n        left: -size.width / 2,\n        width: size.width,\n        height: size.height\n      }}>\n      <div className={className} style={style}>\n        {children}\n      </div>\n    </HTML>\n  )\n}\n\nexport default HtmlContent\n","import React from 'react'\n\nfunction FlatLighting() {\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <pointLight position={[70, -50, 200]} intensity={1} angle={0.3} penumbra={1} />\n      <pointLight position={[1, -1, -5]} intensity={0.5} />\n    </>\n  )\n}\n\nexport default FlatLighting\n","import {useMemo, useEffect} from 'react'\nimport {useThree, useFrame} from 'react-three-fiber'\nimport {\n    EffectComposer,\n    EffectPass,\n    NoiseEffect,\n    RenderPass,\n    BloomEffect,\n} from 'postprocessing'\n\nexport default function Postprocessing() {\n    const {gl, scene, camera, size} = useThree()\n\n    const composer = useMemo(() => {\n        const composer = new EffectComposer(gl)\n        composer.addPass(new RenderPass(scene, camera))\n\n        const bloomEffect = new BloomEffect({\n            luminanceThreshold: 0.0,\n            intensity: 0.2,\n            luminanceSmoothing: 0.0025,\n        })\n\n        const noiseEffect = new NoiseEffect({premultiply: true})\n\n        const effectPass = new EffectPass(camera, bloomEffect)\n        effectPass.renderToScreen = true\n        composer.addPass(effectPass)\n\n        return composer\n    }, [])\n\n    useEffect(() => void composer.setSize(size.width, size.height), [size])\n\n    return useFrame((_, delta) => composer.render(delta), 1)\n}\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass SmokeMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                time: {value: 0.0},\n                lowFreqAmp: {value: 0.0},\n                midFreqAmp: {value: 0.0},\n                highFreqAmp: {value: 0.0},\n                smokeColor1: {value: new Color('#400202')},\n                smokeColor2: {value: new Color('#FB7A29')},\n                // wireColor1: {value: new Color('#D90B0B')},\n                // wireColor2: {value: new Color('#D90B0B')},\n                wireColor1: {value: new Color('#FFFFFF')},\n                wireColor2: {value: new Color('#E1E1E1')},\n                isWire: {value: 0.0},\n            },\n\n            vertexShader: `\n        // https://github.com/stegu/webgl-noise\n\n        vec3 mod289(vec3 x)\n        {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 mod289(vec4 x)\n        {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 permute(vec4 x)\n        {\n            return mod289(((x*34.0)+1.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r)\n        {\n            return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        vec3 fade(vec3 t) {\n            return t*t*t*(t*(t*6.0-15.0)+10.0);\n        }\n\n        // Classic Perlin noise, periodic variant\n        float pnoise(vec3 P, vec3 rep)\n        {\n                vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n                vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n                Pi0 = mod289(Pi0);\n                Pi1 = mod289(Pi1);\n                vec3 Pf0 = fract(P); // Fractional part for interpolation\n                vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n                vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                vec4 iz0 = Pi0.zzzz;\n                vec4 iz1 = Pi1.zzzz;\n\n                vec4 ixy = permute(permute(ix) + iy);\n                vec4 ixy0 = permute(ixy + iz0);\n                vec4 ixy1 = permute(ixy + iz1);\n\n                vec4 gx0 = ixy0 * (1.0 / 7.0);\n                vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                gx0 = fract(gx0);\n                vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                vec4 sz0 = step(gz0, vec4(0.0));\n                gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n                vec4 gx1 = ixy1 * (1.0 / 7.0);\n                vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                gx1 = fract(gx1);\n                vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                vec4 sz1 = step(gz1, vec4(0.0));\n                gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n                vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n                vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n                vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n                vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n                vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n                vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n                vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n                vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n                vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                g000 *= norm0.x;\n                g010 *= norm0.y;\n                g100 *= norm0.z;\n                g110 *= norm0.w;\n                vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n                g001 *= norm1.x;\n                g011 *= norm1.y;\n                g101 *= norm1.z;\n                g111 *= norm1.w;\n\n                float n000 = dot(g000, Pf0);\n                float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                float n111 = dot(g111, Pf1);\n\n                vec3 fade_xyz = fade(Pf0);\n                vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                return 2.2 * n_xyz;\n        }\n\n        float noiseLF;\n        varying float noiseMF;\n        varying float noiseHF;\n      \n        uniform float time;\n        uniform float lowFreqAmp;\n        uniform float midFreqAmp;\n        uniform float highFreqAmp;\n\n\n        float turbulence( vec3 p ) {\n            float w = 100.0;\n            float t = -.5;\n\n            for (float f = 1.0; f <= 10.0; f++) {\n                float power = pow(2.0, f);\n                t += abs(pnoise( vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n            }\n\n            return t;\n        }\n\n        void main() {\n            // noise using displacement from position (big low frequency waves)\n            noiseLF = lowFreqAmp * pnoise( 0.02 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\n\n            // noise using displacement from position (medium mid frequency waves)\n            noiseMF = midFreqAmp * pnoise( 0.1 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\n\n            // noise using displacement from normals (small high frequency waves)\n            noiseHF = highFreqAmp *  -.10 * turbulence( .5 * normal + time );\n\n            // compose both noises\n            float displacement = (-15.0 * noiseHF) + noiseLF + noiseMF;\n\n            // move the position along the normal and transform it\n            vec3 newPosition = position + normalize(normal) * displacement;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n        }`,\n\n            fragmentShader: `\n        varying float noiseMF;\n        varying float noiseHF;\n\n        uniform float isWire;\n        uniform vec3 smokeColor1;\n        uniform vec3 smokeColor2;\n        uniform vec3 wireColor1;\n        uniform vec3 wireColor2;\n\n        void main() {\n            float disp = noiseHF - (noiseMF * 0.1);\n\n            vec3 smokeColor = mix(smokeColor1, smokeColor2, clamp(disp, 0.0, 1.0));\n            vec3 wireColor = mix(wireColor1, wireColor2, clamp(disp, 0.0, 1.0));\n\n            if (isWire == 1.0) {\n              gl_FragColor = vec4( wireColor.rgb, 1.0 );\n            } else {\n              gl_FragColor = vec4( smokeColor.rgb, 1.0 );\n            }\n        }`,\n        })\n    }\n\n    set isWire(value) {\n        this.uniforms.isWire.value = value\n    }\n\n    get isWire() {\n        return this.uniforms.isWire.value\n    }\n\n    set time(value) {\n        this.uniforms.time.value = value\n    }\n\n    get time() {\n        return this.uniforms.time.value\n    }\n\n    set lowFreqAmp(value) {\n        this.uniforms.lowFreqAmp.value = value\n    }\n\n    get lowFreqAmp() {\n        return this.uniforms.lowFreqAmp.value\n    }\n\n    set midFreqAmp(value) {\n        this.uniforms.midFreqAmp.value = value\n    }\n\n    get midFreqAmp() {\n        return this.uniforms.midFreqAmp.value\n    }\n\n    set highFreqAmp(value) {\n        this.uniforms.highFreqAmp.value = value\n    }\n\n    get highFreqAmp() {\n        return this.uniforms.highFreqAmp.value\n    }\n}\n\nextend({SmokeMaterial})\n","import React, {useRef, useEffect} from 'react'\nimport {useFrame, useThree} from 'react-three-fiber'\nimport lerp from 'lerp'\nimport state from '../../store'\n\nimport '../materials/SmokeMaterial'\n\nfunction Storm(props) {\n    const smoke = useRef()\n    const wire = useRef()\n    const smokeMaterial = useRef()\n    const wireMaterial = useRef()\n\n    useEffect(() => {\n        if (wireMaterial) {\n            wireMaterial.current.isWire = 1.0\n        }\n    }, [])\n\n    const lerpFactor = 0.025\n    const intensity = 75\n    const restingMovement = 2.5\n\n    const {\n        viewport: {width, height},\n    } = useThree()\n\n    const radius = Math.max(width / 4, height / 4)\n\n    let last = state.top.current\n    let start = Date.now()\n\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n        smokeMaterial.current.time = 0.00025 * (Date.now() - start)\n        wireMaterial.current.time = 0.00025 * (Date.now() - start)\n\n        smokeMaterial.current.lowFreqAmp = lerp(\n            smokeMaterial.current.lowFreqAmp,\n            (Math.abs(scrollSpeed) * radius) / intensity + restingMovement,\n            lerpFactor\n        )\n        smokeMaterial.current.highFreqAmp = lerp(\n            smokeMaterial.current.highFreqAmp,\n            (Math.abs(scrollSpeed) * radius) / intensity + restingMovement,\n            lerpFactor\n        )\n\n        wireMaterial.current.lowFreqAmp = lerp(\n            wireMaterial.current.lowFreqAmp,\n            (Math.abs(scrollSpeed) * radius) / intensity + restingMovement,\n            lerpFactor\n        )\n        wireMaterial.current.highFreqAmp = lerp(\n            wireMaterial.current.highFreqAmp,\n            (Math.abs(scrollSpeed) * radius) / intensity + restingMovement,\n            lerpFactor\n        )\n\n        last = top.current\n    })\n\n    return (\n        <group {...props} position={[width / 2, 0, 0]}>\n            <mesh ref={smoke}>\n                <icosahedronBufferGeometry args={[radius, 5]} attach=\"geometry\" />\n                <smokeMaterial ref={smokeMaterial} attach=\"material\" transparent={true} />\n            </mesh>\n\n            <mesh ref={wire}>\n                <icosahedronBufferGeometry args={[radius + 0.02, 3]} attach=\"geometry\" />\n                <smokeMaterial\n                    ref={wireMaterial}\n                    attach=\"material\"\n                    wireframe={true}\n                    transparent={true}\n                />\n            </mesh>\n        </group>\n    )\n}\n\nexport default Storm\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass LightbarMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uColor: {value: new Color('#FFFFFF')},\n                uOpacity: {value: 0.0},\n                uTime: {value: 0.0},\n                uShift: {value: 0.0},\n            },\n\n            vertexShader: `\n        uniform float uShift;\n        varying vec2 vUv;\n        void main() {\n          vec3 pos = position;\n          pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * uShift * 5.0) * 0.125);\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n        }`,\n\n            fragmentShader: `\n        uniform vec3 uColor;\n        uniform float uOpacity;\n        uniform float uTime;\n        uniform float uShift;\n        varying vec2 vUv;\n        void main() {\n          \n          gl_FragColor = vec4(uColor.rgb, uOpacity);\n        }`,\n        })\n    }\n\n    set uColor(value) {\n        this.uniforms.uColor.value = value\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n\n    set uOpacity(value) {\n        this.uniforms.uOpacity.value = value\n    }\n\n    get uOpacity() {\n        return this.uniforms.uOpacity.value\n    }\n\n    set uTime(value) {\n        this.uniforms.time.value = value\n    }\n\n    get uTime() {\n        return this.uniforms.time.value\n    }\n    set uShift(value) {\n        this.uniforms.uShift.value = value\n    }\n\n    get uShift() {\n        return this.uniforms.uShift.value\n    }\n}\n\nextend({LightbarMaterial})\n","import React, {useRef, useState, useEffect} from 'react'\nimport {useThree, useFrame} from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\nfunction Lightbar(props) {\n    const bar = useRef()\n    const material = useRef()\n\n    const {viewport} = useThree()\n    const [minWidth, maxWidth] = [-viewport.width / 1.75, viewport.width / 1.75]\n    const [minInterval, maxInterval] = [1000, 5000]\n\n    const zPos = (1 / props.bar.width) * 100\n\n    const [hovered, setHovered] = useState(false)\n\n    let xPos = 0\n    let alpha = 0\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // random position for each bar at random intervals\n    function doSomething() {\n        xPos = random(minWidth, maxWidth)\n        alpha = Math.random() / 5\n    }\n\n    ;(function loop() {\n        setTimeout(function () {\n            doSomething()\n            loop()\n        }, random(minInterval, maxInterval))\n    })()\n\n    // lerp bar to its new position\n    useFrame(() => {\n        bar.current.position.x = lerp(bar.current.position.x, xPos, 0.01)\n        if (hovered) {\n            material.current.uOpacity = 1.0\n        } else {\n            material.current.uOpacity = lerp(material.current.uOpacity, alpha, 0.01)\n        }\n    })\n\n    return (\n        <mesh\n            ref={bar}\n            onPointerOver={(e) => setHovered(true)}\n            onPointerOut={(e) => setHovered(false)}\n            position={[0, 0, zPos]}\n        >\n            <planeBufferGeometry\n                attach=\"geometry\"\n                args={[props.bar.width, props.bar.height]}\n            />\n            <lightbarMaterial\n                ref={material}\n                attach=\"material\"\n                uColor={props.bar.color}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default Lightbar\n","import React, {useRef} from 'react'\nimport {Color} from 'three'\nimport {useThree} from 'react-three-fiber'\nimport Lightbar from './Lightbar'\n\nimport state from '../../store'\n\nfunction Lightbars(props) {\n    const bars = useRef()\n\n    const {viewport} = useThree()\n\n    const height = viewport.height * 2\n\n    const barsStore = [\n        {\n            id: 'bar1',\n            width: viewport.width / 10,\n            height: height,\n            color: new Color('#F84006'),\n        },\n        {\n            id: 'bar2',\n            width: viewport.width / 8,\n            height: height,\n            color: new Color('#E10906'),\n        },\n        {\n            id: 'bar3',\n            width: viewport.width / 7,\n            height: height,\n            color: new Color('#BA0301'),\n        },\n        {\n            id: 'bar4',\n            width: viewport.width / 4,\n            height: height,\n            color: new Color('#7A0707'),\n        },\n        {\n            id: 'bar5',\n            width: viewport.width / 1.5,\n            height: height,\n            color: new Color('#450202'),\n        },\n        {\n            id: 'bar6',\n            width: viewport.width / 1.3,\n            height: height,\n            color: new Color('#400303'),\n        },\n\n        {\n            id: 'bar7',\n            width: viewport.width / 12,\n            height: height,\n            color: new Color('#F84006'),\n        },\n        {\n            id: 'bar8',\n            width: viewport.width / 9,\n            height: height,\n            color: new Color('#E10906'),\n        },\n        {\n            id: 'bar9',\n            width: viewport.width / 6,\n            height: height,\n            color: new Color('#BA0301'),\n        },\n        {\n            id: 'bar10',\n            width: viewport.width / 3,\n            height: height,\n            color: new Color('#7A0707'),\n        },\n        {\n            id: 'bar11',\n            width: viewport.width / 1.5,\n            height: height,\n            color: new Color('#450202'),\n        },\n        {\n            id: 'bar12',\n            width: viewport.width / 1.3,\n            height: height,\n            color: new Color('#400303'),\n        },\n        {\n            id: 'bar13',\n            width: viewport.width / 13,\n            height: height,\n            color: new Color('#FB7A29'),\n        },\n        {\n            id: 'bar14',\n            width: viewport.width / 8,\n            height: height,\n            color: new Color('#E10906'),\n        },\n        {\n            id: 'bar15',\n            width: viewport.width / 5,\n            height: height,\n            color: new Color('#BA0301'),\n        },\n        {\n            id: 'bar16',\n            width: viewport.width / 3,\n            height: height,\n            color: new Color('#7A0707'),\n        },\n        {\n            id: 'bar17',\n            width: viewport.width / 1.5,\n            height: height,\n            color: new Color('#450202'),\n        },\n        {\n            id: 'bar18',\n            width: viewport.width / 1.3,\n            height: height,\n            color: new Color('#400303'),\n        },\n    ]\n\n    return (\n        <group ref={bars} {...props}>\n            {barsStore.map((bar) => (\n                <Lightbar key={bar.id} bar={bar} />\n            ))}\n        </group>\n    )\n}\n\nexport default Lightbars\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass CustomMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                color: {value: new Color('white')},\n                image_texture: {value: null},\n                scale: {value: 0},\n                shift: {value: 0},\n            },\n\n            vertexShader: `\n                uniform float scale;\n                uniform float shift;\n                varying vec2 vUv;\n\n                float rand(vec2 co){\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n                }\n\n                void main() {\n                vec3 pos = position;\n                //   pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n                pos.y += (rand(vec2(pos.x, pos.x)) * shift);\n\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform sampler2D image_texture;\n                uniform float shift;\n                uniform float scale;\n                uniform vec3 color;\n                uniform float opacity;\n\n                varying vec2 vUv;\n                \n                void main() {\n                float angle = 1.55;\n                vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n                vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n                vec4 cr = texture2D(image_texture, p + offset);\n                vec4 cga = texture2D(image_texture, p);\n                vec4 cb = texture2D(image_texture, p - offset);\n\n                vec3 outColor = vec3(cr.r, cga.g, cb.b);\n\n                gl_FragColor = vec4(outColor, cga.a);\n            }`,\n        })\n    }\n\n    get color() {\n        return this.uniforms.color.value\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set map(value) {\n        this.uniforms.image_texture.value = value\n    }\n\n    get map() {\n        return this.uniforms.image_texture.value\n    }\n\n    set scale(value) {\n        this.uniforms.scale.value = value\n    }\n\n    get scale() {\n        return this.uniforms.scale.value\n    }\n\n    set shift(value) {\n        this.uniforms.shift.value = value\n    }\n\n    get shift() {\n        return this.uniforms.shift.value\n    }\n}\n\nextend({CustomMaterial})\n","import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport '../materials/ImageMaterial'\nimport {useLoader, useFrame, useThree} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction ImagePlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n\n        material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05)\n        last = top.current\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <customMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default ImagePlane\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass TransitionMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uColor: {value: new Color('#000000')},\n            },\n\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                  vec3 pos = position;\n                  vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform vec3 uColor;\n                varying vec2 vUv;\n\n                void main() {\n                  float x = vUv.x;\n                  float y = vUv.y;\n\n                  float opacity = 1.0-y;\n\n                  gl_FragColor = vec4(uColor.rgb, opacity);\n            }`,\n        })\n    }\n\n    set uColor(value) {\n        this.uniforms.uColor.value = value\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n}\n\nextend({TransitionMaterial})\n","import React from 'react'\nimport {useThree} from 'react-three-fiber'\n\nimport '../materials/TransitionMaterial'\n\nfunction TransitionPlane(props) {\n    const {viewport} = useThree()\n\n    return (\n        <group {...props}>\n            <mesh>\n                <planeBufferGeometry\n                    attach=\"geometry\"\n                    args={[viewport.width, viewport.height - 0.2]}\n                />\n                <transitionMaterial\n                    attach=\"material\"\n                    uColor={props.color}\n                    toneMapped={false}\n                    transparent\n                />\n            </mesh>\n        </group>\n    )\n}\n\nexport default TransitionPlane\n","import React from 'react'\nimport {useThree} from 'react-three-fiber'\n\nfunction BackgroundPlane(props) {\n    const {viewport} = useThree()\n\n    return (\n        <group {...props}>\n            <mesh {...props}>\n                <planeBufferGeometry\n                    attach=\"geometry\"\n                    args={[viewport.width, viewport.height]}\n                />\n                <meshBasicMaterial attach=\"material\" color=\"#000000\" transparent />\n            </mesh>\n        </group>\n    )\n}\n\nexport default BackgroundPlane\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass VignetteMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uColor: {value: new Color('#000000')},\n            },\n\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                  vec3 pos = position;\n                  vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform vec3 uColor;\n                varying vec2 vUv;\n\n                void main() {\n                  float distance = length(vUv - vec2(0.5, 0.5));\n\n                  float opacity = distance;\n\n                  gl_FragColor = vec4(uColor.rgb, opacity);\n            }`,\n        })\n    }\n\n    set uColor(value) {\n        this.uniforms.uColor.value = value\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n}\n\nextend({VignetteMaterial})\n","import React from 'react'\nimport {useThree} from 'react-three-fiber'\n\nimport '../materials/VignetteMaterial'\n\nfunction VignettePlane(props) {\n    const {viewport} = useThree()\n\n    return (\n        <group {...props}>\n            <mesh>\n                <planeBufferGeometry\n                    attach=\"geometry\"\n                    args={[viewport.width, viewport.height * 1.05]}\n                />\n                <vignetteMaterial\n                    attach=\"material\"\n                    uColor={props.color}\n                    toneMapped={false}\n                    transparent\n                />\n            </mesh>\n        </group>\n    )\n}\n\nexport default VignettePlane\n","import {render} from 'react-dom'\nimport React, {useState, useEffect, useRef, Suspense} from 'react'\nimport {Canvas} from 'react-three-fiber'\n\nimport {Block} from './components/Blocks'\nimport HtmlContent from './components/HtmlContent'\n\nimport state from './store'\nimport './styles.css'\nimport FlatLighting from './components/lighting/FlatLighting'\nimport Postprocessing from './components/postprocessing/Postprocessing'\n\nimport Storm from './components/objects/Storm'\nimport Lightbars from './components/objects/Lightbars'\n\nimport ImagePlane from './components/media/ImagePlane'\nimport TransitionPlane from './components/objects/TransitionPlane'\nimport BackgroundPlane from './components/objects/BackgroundPlane'\nimport VignettePlane from './components/objects/VignettePlane'\n\nfunction App() {\n    const [events, setEvents] = useState()\n    const domContent = useRef()\n    const scrollArea = useRef()\n    // Scroll an area by updating state.top.current\n    const onScroll = (e) => (state.top.current = e.target.scrollTop)\n    useEffect(() => void onScroll({target: scrollArea.current}), [])\n\n    // Flatten default camera\n    const perspective = 800\n    const fov = (180 * (2 * Math.atan(window.innerHeight / 2 / perspective))) / Math.PI\n\n    return (\n        <>\n            <Canvas\n                gl={{\n                    alpha: true,\n                    powerPreference: 'high-performance',\n                    antialias: false,\n                    stencil: false,\n                    depth: false,\n                }}\n                onCreated={({gl, events}) => {\n                    // Export canvas events, we will put them onto the scroll area (hovers, clicks etc)\n                    setEvents(events)\n                }}\n                camera={{position: [0, 0, perspective], fov: fov}}\n            >\n                <FlatLighting />\n\n                {/* Stationary (Menu) Block */}\n                <Block factor={0.0} offset={0}>\n                    <Lightbars position={[0, 0, -20]} />\n                    <VignettePlane color={'#000000'} />\n                    <HtmlContent portal={domContent}>\n                        {/* <div className=\"side-menu\">\n                            <div className=\"title-box\">\n                                <h1>inst.19-20</h1>\n                                <h1>an</h1>\n                                <h1>experimental</h1>\n                                <h1>album</h1>\n                            </div>\n                            <div className=\"title-box\">\n                                <h1>by Jack Woodbury.</h1>\n                            </div>\n                            <div className=\"navigation-container\">\n                                <div className=\"navigation-bar\" />\n                                <div className=\"navigation-bar\" />\n                                <div className=\"navigation-bar\" />\n                            </div>\n                            <div className=\"title-box bottom\">\n                                <h1>scroll to discover</h1>\n                            </div>\n                        </div> */}\n                        <div className=\"side-text-box\">\n                            <h1 className=\"side-text\">inst.19-20</h1>\n                        </div>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={1.0} offset={0}>\n                    <HtmlContent portal={domContent} className=\"section-box\">\n                        <div className=\"album-image-box\">\n                            <img\n                                data-id=\"album_cover\"\n                                className=\"image-plane\"\n                                src=\"media/images/album_cover.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <ImagePlane\n                            src=\"media/images/album_cover.jpg\"\n                            image_id=\"album_cover\"\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* First Paragraph Block */}\n                <Block factor={1.0} offset={1}>\n                    <TransitionPlane />\n                    <HtmlContent portal={domContent} className=\"paragraph-section\">\n                        <p className=\"paragraph\">\n                            The works collected on inst.19-20 are derived from two\n                            audiovisual installations created during 2019 and early 2020.\n                            Titled -A Tree Falls- and -CORROSE-, these installations\n                            explore and acoustically signify the compositional influence\n                            of the audience and loudspeaker, respectively.\n                        </p>\n                        <p className=\"paragraph\">\n                            Installed, each work presents and disrupts a series of\n                            electro-acoustic compositions. In A Tree Falls, this\n                            disruption stems from the audience’s interaction with the\n                            work. In CORROSE, by comparison, the disruption comes from\n                            damaged and augmented loudspeakers. inst.19-20 gathers these\n                            works, free of their installed and disrupted context.\n                        </p>\n                        <p className=\"paragraph\">\n                            inst.19-20's eight tracks were composed as part of Jack’s\n                            Master of Fine Arts studies at the New Zealand School of\n                            Music. The material is largely generated using processed\n                            recordings of piano and tubular bells, alongside field\n                            recordings of Wellington’s Ohariu Valley. Compositionally, the\n                            album employs generative looping software, the juxtaposition\n                            of noise/glitch and ambient material, and terraced dynamics.\n                        </p>\n                        <p className=\"paragraph\">\n                            A Tree Falls, one of the installations from which inst.19-20\n                            is derived, was presented at the Australasian Computer Music\n                            Conference in Melbourne in 2019. A paper discussing the work\n                            was published at the International Computer Music Conference\n                            in New York in 2019 (written in collaboration with composer Mo\n                            Zareei).\n                        </p>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={1.0} offset={2}>\n                    <BackgroundPlane position={[0, 0, 0]} />\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">\n                            From here will be the different sections exploring the\n                            different installations with accompanying videos / visual\n                            things.\n                        </p>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={1.0} offset={3}>\n                    <BackgroundPlane position={[0, 0, 0]} />\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">First installations for example.</p>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={-1.0} offset={3}>\n                    <Storm position={[0, 0, 0]} />\n                </Block>\n\n                <Suspense fallback={null}>\n                    <Postprocessing />\n                </Suspense>\n            </Canvas>\n\n            {/* container with events */}\n            <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll} {...events}>\n                {/* content container containing all html elements */}\n                <div style={{position: 'sticky', top: 0}} ref={domContent} />\n                {/* sizer for the scroll area */}\n                <div style={{height: `${state.pages * 100}vh`}} />\n            </div>\n        </>\n    )\n}\n\nrender(<App />, document.querySelector('#root'))\n"],"sourceRoot":""}