{"version":3,"sources":["store.js","components/Blocks.js","components/HtmlContent.js","components/lighting/FlatLighting.js","components/materials/LightbarMaterial.js","components/objects/Lightbar.js","components/objects/Lightbars.js","components/media/materials/BasicMaterial.js","components/media/BasicPlane.js","components/media/materials/DistortMaterial.js","components/media/DistortPlane.js","components/media/materials/MorphMaterial.js","components/media/TwoImagePlane.js","components/materials/TransitionMaterial.js","components/objects/TransitionPlane.js","components/materials/VignetteMaterial.js","components/objects/VignettePlane.js","index.js"],"names":["state","sections","pages","zoom","top","createRef","offsetContext","createContext","Block","children","offset","factor","props","useBlock","parentOffset","sectionHeight","aspect","canvasHeight","ref","useRef","undefined","useFrame","curY","current","position","y","curTop","Math","min","lerp","setInterval","Provider","value","useThree","size","viewport","useContext","viewportWidth","width","viewportHeight","height","canvasWidth","mobile","margin","contentMaxWidth","HtmlContent","className","style","portal","left","FlatLighting","intensity","angle","penumbra","LightbarMaterial","ShaderMaterial","constructor","super","uniforms","uColor","Color","uOpacity","uTime","uShift","vertexShader","fragmentShader","this","time","extend","Lightbar","bar","material","minWidth","maxWidth","zPos","useState","hovered","setHovered","xPos","alpha","random","lowerBound","upperBound","loop","setTimeout","x","onPointerOver","e","onPointerOut","attach","args","color","transparent","Lightbars","bars","barsStore","id","map","key","BasicMaterial","opacity","image_texture","BasicPlane","useLoader","THREE","src","images","document","getElementsByClassName","image","Array","from","filter","el","dataset","image_id","imageSize","imageOffset","getBoundingClientRect","set","window","innerWidth","imageTexture","scale","DistortMaterial","shift","DistortPlane","last","scrollSpeed","MorphMaterial","uTexture","uPreviousTexture","uMixValue","TwoImagePlane","previousImageTexture","src_prev","offsetMapped","continue","max","TransitionMaterial","TransitionPlane","scale-y","upsideDown","toneMapped","VignetteMaterial","VignettePlane","App","events","setEvents","domContent","scrollArea","onScroll","target","scrollTop","useEffect","fov","atan","innerHeight","PI","gl","powerPreference","antialias","stencil","depth","onCreated","camera","data-id","alt","fallback","render","querySelector"],"mappings":"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","file":"static/js/main.88ac5809.chunk.js","sourcesContent":["import {createRef} from 'react'\n\n// sections: how many block sections there are\n// pages: length of the scroll area (1 = 1vh)\nconst state = {\n    sections: 12,\n    pages: 12,\n    zoom: 1,\n    top: createRef(),\n}\n\nexport default state\n","import React, {createContext, useRef, useContext} from 'react'\nimport {useFrame, useThree} from 'react-three-fiber'\nimport lerp from 'lerp'\nimport state from '../store'\n\n// Nestable content block for a declarative scroll rig\n// Based on Paul Henschel's work:\n// https://tympanus.net/codrops/2019/12/16/scroll-refraction-and-shader-effects-in-three-js-and-react/\n\n// Offset: section index (eg: offset = 2 will be the third content section)\n// Factor: sets block's speed when page is scrolled\n\nconst offsetContext = createContext(0)\n\nfunction Block({children, offset, factor, ...props}) {\n    // Fetch parent offset and the height of a single section\n    const {offset: parentOffset, sectionHeight, aspect, canvasHeight} = useBlock()\n    const ref = useRef()\n    offset = offset !== undefined ? offset : parentOffset\n\n    // Runs every frame and lerps the inner block into its place\n    useFrame(() => {\n        const curY = ref.current.position.y\n        const curTop = Math.min(\n            state.top.current / aspect,\n            canvasHeight * (state.pages - 1)\n        )\n\n        ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n    })\n\n    setInterval(function () {\n        // console.log(canvasHeight * (state.pages - 1))\n    }, 1000)\n\n    return (\n        <offsetContext.Provider value={offset}>\n            <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n                <group ref={ref}>{children}</group>\n            </group>\n        </offsetContext.Provider>\n    )\n}\n\nfunction useBlock() {\n    const {sections, pages, zoom} = state\n    const {size, viewport} = useThree()\n    const offset = useContext(offsetContext)\n    const viewportWidth = viewport.width\n    const viewportHeight = viewport.height\n    const canvasWidth = viewportWidth / zoom\n    const canvasHeight = viewportHeight / zoom\n    const mobile = size.width < 700\n    const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n    const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n    const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n    const aspect = size.height / viewportHeight\n    return {\n        aspect,\n        viewport,\n        offset,\n        viewportWidth,\n        viewportHeight,\n        canvasWidth,\n        canvasHeight,\n        mobile,\n        margin,\n        contentMaxWidth,\n        sectionHeight,\n    }\n}\n\nexport {Block, useBlock}\n","import React from 'react'\nimport { useThree } from 'react-three-fiber'\nimport { HTML } from 'drei'\n\n// drei component tying html elements to any object in a scene\n// portal: target container\n\nfunction HtmlContent({ className, style, children, portal }) {\n  const { size } = useThree()\n  return (\n    <HTML\n      portal={portal}\n      style={{\n        position: 'absolute',\n        top: -size.height / 2,\n        left: -size.width / 2,\n        width: size.width,\n        height: size.height\n      }}>\n      <div className={className} style={style}>\n        {children}\n      </div>\n    </HTML>\n  )\n}\n\nexport default HtmlContent\n","import React from 'react'\n\nfunction FlatLighting() {\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <pointLight position={[70, -50, 200]} intensity={1} angle={0.3} penumbra={1} />\n      <pointLight position={[1, -1, -5]} intensity={0.5} />\n    </>\n  )\n}\n\nexport default FlatLighting\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass LightbarMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uColor: {value: new Color('#FFFFFF')},\n                uOpacity: {value: 0.0},\n                uTime: {value: 0.0},\n                uShift: {value: 0.0},\n            },\n\n            vertexShader: `\n        uniform float uShift;\n        varying vec2 vUv;\n        void main() {\n          vec3 pos = position;\n          pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * uShift * 5.0) * 0.125);\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n        }`,\n\n            fragmentShader: `\n        uniform vec3 uColor;\n        uniform float uOpacity;\n        uniform float uTime;\n        uniform float uShift;\n        varying vec2 vUv;\n        void main() {\n          \n          gl_FragColor = vec4(uColor.rgb, uOpacity);\n        }`,\n        })\n    }\n\n    set uColor(value) {\n        this.uniforms.uColor.value = value\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n\n    set uOpacity(value) {\n        this.uniforms.uOpacity.value = value\n    }\n\n    get uOpacity() {\n        return this.uniforms.uOpacity.value\n    }\n\n    set uTime(value) {\n        this.uniforms.time.value = value\n    }\n\n    get uTime() {\n        return this.uniforms.time.value\n    }\n    set uShift(value) {\n        this.uniforms.uShift.value = value\n    }\n\n    get uShift() {\n        return this.uniforms.uShift.value\n    }\n}\n\nextend({LightbarMaterial})\n","import React, {useRef, useState} from 'react'\nimport {useThree, useFrame} from 'react-three-fiber'\nimport lerp from 'lerp'\n\nimport '../materials/LightbarMaterial'\n\nfunction Lightbar(props) {\n    const bar = useRef()\n    const material = useRef()\n\n    const {viewport} = useThree()\n    const [minWidth, maxWidth] = [-viewport.width / 1.75, viewport.width / 1.75]\n    const [minInterval, maxInterval] = [1000, 5000]\n\n    const zPos = (1 / props.bar.width) * 100\n\n    const [hovered, setHovered] = useState(false)\n\n    let xPos = 0\n    let alpha = 0\n\n    // returns random float between lower and upper bounds\n    function random(lowerBound, upperBound) {\n        return lowerBound + Math.random() * (upperBound + 1 - lowerBound)\n    }\n\n    // random position for each bar at random intervals\n    function doSomething() {\n        xPos = random(minWidth, maxWidth)\n        alpha = Math.random() / 5\n    }\n\n    ;(function loop() {\n        setTimeout(function () {\n            doSomething()\n            loop()\n        }, random(minInterval, maxInterval))\n    })()\n\n    // lerp bar to its new position\n    useFrame(() => {\n        bar.current.position.x = lerp(bar.current.position.x, xPos, 0.01)\n        if (hovered) {\n            material.current.uOpacity = 1.0\n        } else {\n            material.current.uOpacity = lerp(material.current.uOpacity, alpha, 0.01)\n        }\n    })\n\n    return (\n        <mesh\n            ref={bar}\n            onPointerOver={(e) => setHovered(true)}\n            onPointerOut={(e) => setHovered(false)}\n            position={[0, 0, zPos]}\n        >\n            <planeBufferGeometry\n                attach=\"geometry\"\n                args={[props.bar.width, props.bar.height]}\n            />\n            <lightbarMaterial\n                ref={material}\n                attach=\"material\"\n                uColor={props.bar.color}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default Lightbar\n","import React, {useRef} from 'react'\nimport {Color} from 'three'\nimport {useThree} from 'react-three-fiber'\nimport Lightbar from './Lightbar'\n\nfunction Lightbars(props) {\n    const bars = useRef()\n\n    const {viewport} = useThree()\n\n    const height = viewport.height * 3\n\n    const barsStore = [\n        {\n            id: 'bar1',\n            width: viewport.width / 10,\n            height: height,\n            color: new Color('#F84006'),\n        },\n        {\n            id: 'bar2',\n            width: viewport.width / 8,\n            height: height,\n            color: new Color('#E10906'),\n        },\n        {\n            id: 'bar3',\n            width: viewport.width / 7,\n            height: height,\n            color: new Color('#BA0301'),\n        },\n        {\n            id: 'bar4',\n            width: viewport.width / 4,\n            height: height,\n            color: new Color('#7A0707'),\n        },\n        {\n            id: 'bar5',\n            width: viewport.width / 1.5,\n            height: height,\n            color: new Color('#450202'),\n        },\n        {\n            id: 'bar6',\n            width: viewport.width / 1.3,\n            height: height,\n            color: new Color('#400303'),\n        },\n\n        {\n            id: 'bar7',\n            width: viewport.width / 12,\n            height: height,\n            color: new Color('#F84006'),\n        },\n        {\n            id: 'bar8',\n            width: viewport.width / 9,\n            height: height,\n            color: new Color('#E10906'),\n        },\n        {\n            id: 'bar9',\n            width: viewport.width / 6,\n            height: height,\n            color: new Color('#BA0301'),\n        },\n        {\n            id: 'bar10',\n            width: viewport.width / 3,\n            height: height,\n            color: new Color('#7A0707'),\n        },\n        {\n            id: 'bar11',\n            width: viewport.width / 1.5,\n            height: height,\n            color: new Color('#450202'),\n        },\n        {\n            id: 'bar12',\n            width: viewport.width / 1.3,\n            height: height,\n            color: new Color('#400303'),\n        },\n        {\n            id: 'bar13',\n            width: viewport.width / 13,\n            height: height,\n            color: new Color('#FB7A29'),\n        },\n        {\n            id: 'bar14',\n            width: viewport.width / 8,\n            height: height,\n            color: new Color('#E10906'),\n        },\n        {\n            id: 'bar15',\n            width: viewport.width / 5,\n            height: height,\n            color: new Color('#BA0301'),\n        },\n        {\n            id: 'bar16',\n            width: viewport.width / 3,\n            height: height,\n            color: new Color('#7A0707'),\n        },\n        {\n            id: 'bar17',\n            width: viewport.width / 1.5,\n            height: height,\n            color: new Color('#450202'),\n        },\n        {\n            id: 'bar18',\n            width: viewport.width / 1.3,\n            height: height,\n            color: new Color('#400303'),\n        },\n    ]\n\n    return (\n        <group ref={bars} {...props}>\n            {barsStore.map((bar) => (\n                <Lightbar key={bar.id} bar={bar} />\n            ))}\n        </group>\n    )\n}\n\nexport default Lightbars\n","import {ShaderMaterial} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass BasicMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                image_texture: {value: null},\n            },\n\n            vertexShader: `\n                varying vec2 vUv;\n\n                void main() {\n                    vec3 pos = position;\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform sampler2D image_texture;\n                uniform float opacity;\n\n                varying vec2 vUv;\n                \n                void main() {\n                    vec4 outColor = texture2D(image_texture, vUv);\n\n                    gl_FragColor = vec4(outColor.rgb, opacity);\n            }`,\n        })\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set map(value) {\n        this.uniforms.image_texture.value = value\n    }\n\n    get map() {\n        return this.uniforms.image_texture.value\n    }\n}\n\nextend({BasicMaterial})\n","import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader} from 'react-three-fiber'\n\nimport './materials/BasicMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction BasicPlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <basicMaterial\n                ref={material}\n                attach=\"material\"\n                map={imageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default BasicPlane\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass DistortMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                color: {value: new Color('white')},\n                image_texture: {value: null},\n                scale: {value: 0},\n                shift: {value: 0},\n            },\n\n            vertexShader: `\n                uniform float scale;\n                uniform float shift;\n                varying vec2 vUv;\n\n                float rand(vec2 co){\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n                }\n\n                void main() {\n                vec3 pos = position;\n                //   pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 5.0) * 0.125);\n                // pos.y += (rand(vec2(pos.x, pos.x)) * shift);\n\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform sampler2D image_texture;\n                uniform float shift;\n                uniform float scale;\n                uniform vec3 color;\n                uniform float opacity;\n\n                varying vec2 vUv;\n                \n                void main() {\n                float angle = 1.55;\n                vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n                vec2 offset = shift * vec2(cos(angle), sin(angle));\n                vec4 cr = texture2D(image_texture, p + offset);\n                vec4 cga = texture2D(image_texture, p);\n                vec4 cb = texture2D(image_texture, p - offset);\n\n                vec3 outColor = vec3(cr.r, cga.g, cb.b);\n\n                gl_FragColor = vec4(outColor, cga.a);\n            }`,\n        })\n    }\n\n    get color() {\n        return this.uniforms.color.value\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set map(value) {\n        this.uniforms.image_texture.value = value\n    }\n\n    get map() {\n        return this.uniforms.image_texture.value\n    }\n\n    set scale(value) {\n        this.uniforms.scale.value = value\n    }\n\n    get scale() {\n        return this.uniforms.scale.value\n    }\n\n    set shift(value) {\n        this.uniforms.shift.value = value\n    }\n\n    get shift() {\n        return this.uniforms.shift.value\n    }\n}\n\nextend({DistortMaterial})\n","import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader, useFrame} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\n\nimport './materials/DistortMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction DistortPlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, image.src)\n\n    let last = state.top.current\n    useFrame(() => {\n        const {top} = state\n        const scrollSpeed = top.current - last\n\n        material.current.shift = lerp(material.current.shift, -scrollSpeed / 150, 0.05)\n        last = top.current\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <distortMaterial\n                ref={material}\n                attach=\"material\"\n                color={color}\n                map={imageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default DistortPlane\n","import {ShaderMaterial} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass MorphMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                opacity: {value: 1},\n                uTexture: {value: null},\n                uPreviousTexture: {value: null},\n                uMixValue: {value: 0},\n            },\n\n            vertexShader: `\n                uniform vec2 uOffset;\n\n                varying vec2 vUv;\n\n                vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) {\n                    float M_PI = 3.1415926535897932384626433832795;\n                    position.x = position.x + (sin(uv.y * M_PI) * offset.x);\n                    position.y = position.y + (sin(uv.x * M_PI) * offset.y);\n                    return position;\n                }\n\n                void main() {\n                    vUv =  uv;\n                    vec3 newPosition = position;\n                    newPosition = deformationCurve(position,uv,uOffset);\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n                }`,\n\n            fragmentShader: `\n                uniform sampler2D uTexture;\n                uniform sampler2D uPreviousTexture;\n                uniform float opacity;\n                uniform float uMixValue;\n\n                varying vec2 vUv;\n\n                float strength = 0.5;\n\n                //https://github.com/gl-transitions/gl-transitions/blob/master/transitions/morph.glsl\n                vec3 transition(vec2 uv) {\n                    float inv = 1.0 - uMixValue;\n\n                    vec4 fromColor = texture2D(uPreviousTexture, uv);\n                    vec4 toColor = texture2D(uTexture, uv);\n\n                    vec2 fromOffset = (((fromColor.rg + fromColor.b) * 0.5) * 2.0 - 1.0);\n                    vec2 toOffset = (((toColor.rg + toColor.b) * 0.5) * 2.0 - 1.0);\n                    vec2 offset = mix(fromOffset, toOffset, 0.5) * strength;\n                    \n                    return mix(texture2D(uPreviousTexture, uv + offset * uMixValue).rgb, texture2D(uTexture, uv - offset * inv).rgb, uMixValue);\n                }\n        \n                void main() {\n                    //float mixValue = pow(uMixValue, 4.0);\n                    vec3 trans = transition(vUv);\n                    //vec3 outColor = mix(transition(vUv), vec3(mixValue, 0.0, 0.0), mixValue); \n\n                    gl_FragColor = vec4(trans.rgb, opacity);\n                }`,\n        })\n    }\n\n    get opacity() {\n        return this.uniforms.opacity.value\n    }\n\n    set opacity(value) {\n        if (this.uniforms) this.uniforms.opacity.value = value\n    }\n\n    set uTexture(value) {\n        this.uniforms.uTexture.value = value\n    }\n\n    get uTexture() {\n        return this.uniforms.uTexture.value\n    }\n\n    set uPreviousTexture(value) {\n        this.uniforms.uPreviousTexture.value = value\n    }\n\n    get uPreviousTexture() {\n        return this.uniforms.uPreviousTexture.value\n    }\n\n    set uMixValue(value) {\n        this.uniforms.uMixValue.value = value\n    }\n\n    get uMixValue() {\n        return this.uniforms.uMixValue.value\n    }\n}\n\nextend({MorphMaterial})\n","import React, {useRef} from 'react'\nimport * as THREE from 'three'\nimport {useLoader, useFrame} from 'react-three-fiber'\nimport state from '../../store'\nimport lerp from 'lerp'\nimport {useBlock} from '../Blocks'\n\nimport './materials/MorphMaterial'\n\n// A 3D plane representing an HTML image element with CSS positioning\n// The image uses a custom material which allows for shader manipulation\n\nfunction TwoImagePlane({color = 'white', ...props}) {\n    const material = useRef()\n    const texture = useLoader(THREE.TextureLoader, props.src) // BREAKS IF THIS IS REMOVED???\n    var images = document.getElementsByClassName('image-plane')\n    images = Array.from(images) //convert to array\n\n    const image = images.filter((el) => el.dataset.id === props.image_id)[0]\n\n    const imageSize = new THREE.Vector2(0, 0)\n    const imageOffset = new THREE.Vector2(0, 0)\n\n    const {width, height, left} = image.getBoundingClientRect()\n\n    imageSize.set(width, height)\n    imageOffset.set(left - window.innerWidth / 2 + width / 2, 0.0)\n\n    const imageTexture = useLoader(THREE.TextureLoader, props.src)\n    const previousImageTexture = useLoader(THREE.TextureLoader, props.src_prev)\n\n    const {viewportHeight, offset} = useBlock()\n\n    useFrame(() => {\n        const {top} = state\n        let offsetMapped = 0\n\n        if (props.continue) {\n            offsetMapped = (offset * viewportHeight - top.current) / viewportHeight\n        } else {\n            offsetMapped = Math.max(\n                0,\n                (offset * viewportHeight - top.current) / viewportHeight\n            )\n        }\n\n        // same lerp used in blocks.js\n        material.current.uMixValue = lerp(material.current.uMixValue, offsetMapped, 0.1)\n    })\n\n    return (\n        <mesh\n            position={[imageOffset.x, imageOffset.y, 0]}\n            scale={[imageSize.x, imageSize.y, 1]}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[1, 1, 32, 32]} />\n            <morphMaterial\n                ref={material}\n                attach=\"material\"\n                uTexture={imageTexture}\n                uPreviousTexture={previousImageTexture}\n                transparent={true}\n            />\n        </mesh>\n    )\n}\n\nexport default TwoImagePlane\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass TransitionMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uColor: {value: new Color('#000000')},\n            },\n\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                  vec3 pos = position;\n                  vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform vec3 uColor;\n                varying vec2 vUv;\n\n                void main() {\n                  float x = vUv.x;\n                  float y = vUv.y;\n\n                  float opacity = 1.0-y;\n\n                  gl_FragColor = vec4(uColor.rgb, opacity);\n            }`,\n        })\n    }\n\n    set uColor(value) {\n        this.uniforms.uColor.value = value\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n}\n\nextend({TransitionMaterial})\n","import React from 'react'\nimport {useThree} from 'react-three-fiber'\n\nimport '../materials/TransitionMaterial'\n\nfunction TransitionPlane(props) {\n    const {viewport} = useThree()\n\n    return (\n        <group>\n            <mesh scale-y={props.upsideDown ? -1 : 1}>\n                <planeBufferGeometry\n                    attach=\"geometry\"\n                    args={[viewport.width, viewport.height * 1.02 - 0.2]}\n                />\n                <transitionMaterial\n                    attach=\"material\"\n                    uColor={props.color}\n                    toneMapped={false}\n                    transparent={true}\n                />\n            </mesh>\n        </group>\n    )\n}\n\nexport default TransitionPlane\n","import {ShaderMaterial, Color} from 'three'\nimport {extend} from 'react-three-fiber'\n\nclass VignetteMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                uColor: {value: new Color('#000000')},\n            },\n\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                  vec3 pos = position;\n                  vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n            }`,\n\n            fragmentShader: `\n                uniform vec3 uColor;\n                varying vec2 vUv;\n\n                void main() {\n                  float distance = length(vUv - vec2(0.5, 0.5));\n\n                  float opacity = distance;\n\n                  gl_FragColor = vec4(uColor.rgb, opacity);\n            }`,\n        })\n    }\n\n    set uColor(value) {\n        this.uniforms.uColor.value = value\n    }\n\n    get uColor() {\n        return this.uniforms.uColor.value\n    }\n}\n\nextend({VignetteMaterial})\n","import React from 'react'\nimport {useThree} from 'react-three-fiber'\n\nimport '../materials/VignetteMaterial'\n\nfunction VignettePlane(props) {\n    const {viewport} = useThree()\n\n    return (\n        <group {...props}>\n            <mesh>\n                <planeBufferGeometry\n                    attach=\"geometry\"\n                    args={[viewport.width, viewport.height]}\n                />\n                <vignetteMaterial\n                    attach=\"material\"\n                    uColor={props.color}\n                    toneMapped={false}\n                    transparent\n                />\n            </mesh>\n        </group>\n    )\n}\n\nexport default VignettePlane\n","import {render} from 'react-dom'\nimport React, {useState, useEffect, useRef, Suspense} from 'react'\nimport {Canvas} from 'react-three-fiber'\n\nimport {Block} from './components/Blocks'\nimport HtmlContent from './components/HtmlContent'\n\nimport state from './store'\nimport './styles.css'\nimport FlatLighting from './components/lighting/FlatLighting'\n\nimport Lightbars from './components/objects/Lightbars'\n\nimport BasicPlane from './components/media/BasicPlane'\nimport DistortPlane from './components/media/DistortPlane'\nimport TwoImagePlane from './components/media/TwoImagePlane'\n\nimport TransitionPlane from './components/objects/TransitionPlane'\nimport VignettePlane from './components/objects/VignettePlane'\n\nfunction App() {\n    const [events, setEvents] = useState()\n    const domContent = useRef()\n    const scrollArea = useRef()\n    // Scroll an area by updating state.top.current\n    const onScroll = (e) => (state.top.current = e.target.scrollTop)\n    useEffect(() => void onScroll({target: scrollArea.current}), [])\n\n    // Flatten default camera\n    const perspective = 800\n    const fov = (180 * (2 * Math.atan(window.innerHeight / 2 / perspective))) / Math.PI\n\n    return (\n        <>\n            <Canvas\n                gl={{\n                    alpha: true,\n                    powerPreference: 'high-performance',\n                    antialias: false,\n                    stencil: false,\n                    depth: false,\n                }}\n                onCreated={({gl, events}) => {\n                    // Export canvas events, we will put them onto the scroll area (hovers, clicks etc)\n                    setEvents(events)\n                }}\n                camera={{position: [0, 0, perspective], fov: fov}}\n            >\n                <FlatLighting />\n\n                {/* Stationary (Menu) Block */}\n                <Block factor={0.0} offset={0}>\n                    <HtmlContent portal={domContent}>\n                        <div className=\"side-text-box\">\n                            <h1 className=\"side-text\">inst.19-20</h1>\n                        </div>\n                    </HtmlContent>\n                </Block>\n\n                {/* Lightbars */}\n                <Block factor={1.0} offset={0}>\n                    <Lightbars position={[0, 0, -5]} />\n                    <VignettePlane color={'#000000'} />\n                    <HtmlContent portal={domContent} className=\"section-box\">\n                        <div className=\"album-image-box\">\n                            <img\n                                data-id=\"album_cover\"\n                                className=\"image-plane\"\n                                src=\"media/images/album_cover.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <DistortPlane\n                            src=\"media/images/album_cover.jpg\"\n                            image_id=\"album_cover\"\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* First Paragraph Block */}\n                <Block factor={1.0} offset={1}>\n                    <TransitionPlane />\n                    <VignettePlane color={'#000000'} />\n\n                    <HtmlContent portal={domContent} className=\"paragraph-section\">\n                        <p className=\"paragraph\">\n                            The works collected on inst.19-20 are derived from two\n                            audiovisual installations created during 2019 and early 2020.\n                            Titled -A Tree Falls- and -CORROSE-, these installations\n                            explore and acoustically signify the compositional influence\n                            of the audience and loudspeaker, respectively.\n                        </p>\n                        <p className=\"paragraph\">\n                            Installed, each work presents and disrupts a series of\n                            electro-acoustic compositions. In A Tree Falls, this\n                            disruption stems from the audience’s interaction with the\n                            work. In CORROSE, by comparison, the disruption comes from\n                            damaged and augmented loudspeakers. inst.19-20 gathers these\n                            works, free of their installed and disrupted context.\n                        </p>\n                        <p className=\"paragraph\">\n                            inst.19-20's eight tracks were composed as part of Jack’s\n                            Master of Fine Arts studies at the New Zealand School of\n                            Music. The material is largely generated using processed\n                            recordings of piano and tubular bells, alongside field\n                            recordings of Wellington’s Ohariu Valley. Compositionally, the\n                            album employs generative looping software, the juxtaposition\n                            of noise/glitch and ambient material, and terraced dynamics.\n                        </p>\n                        <p className=\"paragraph\">\n                            A Tree Falls, one of the installations from which inst.19-20\n                            is derived, was presented at the Australasian Computer Music\n                            Conference in Melbourne in 2019. A paper discussing the work\n                            was published at the International Computer Music Conference\n                            in New York in 2019 (written in collaboration with composer Mo\n                            Zareei). - rattle.co.nz\n                        </p>\n                    </HtmlContent>\n                </Block>\n\n                {/* Short Intro */}\n                <Block factor={1.0} offset={2}>\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">\n                            From here will be the different sections exploring the\n                            different installations with accompanying videos / visual\n                            things.\n                        </p>\n                    </HtmlContent>\n                </Block>\n\n                {/* Corrose  */}\n                {/* Corrose Title  */}\n                <Block factor={1.0} offset={3}>\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"corrose-title\">CORROSE</p>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={-1.5} offset={3}>\n                    <HtmlContent portal={domContent} className=\"section-box\">\n                        <div className=\"project-main-image-box\">\n                            <img\n                                data-id=\"corrose-main-image\"\n                                className=\"image-plane\"\n                                src=\"media/images/corrose_main.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <TwoImagePlane\n                            src=\"media/images/black.png\"\n                            src_prev=\"media/images/corrose_main.jpg\"\n                            image_id=\"corrose-main-image\"\n                            continue\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* Corrose Infomation  */}\n                <Block factor={1.0} offset={4}>\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">\n                            First paragraph with a bit of info about Corrose.\n                        </p>\n\n                        <div className=\"corrose-image-1\">\n                            <img\n                                data-id=\"corrose-image\"\n                                className=\"image-plane\"\n                                src=\"media/images/corrose_2.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <TwoImagePlane\n                            src=\"media/images/black.png\"\n                            src_prev=\"media/images/corrose_2.jpg\"\n                            image_id=\"corrose-image\"\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* A Tree Falls  */}\n                {/* A Tree Falls Title  */}\n                <Block factor={1.0} offset={6}>\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"corrose-title\">A Tree Falls</p>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={-1.5} offset={6}>\n                    <HtmlContent portal={domContent} className=\"section-box\">\n                        <div className=\"project-main-image-box\">\n                            <img\n                                data-id=\"corrose-main-image\"\n                                className=\"image-plane\"\n                                src=\"media/images/atf_main.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <TwoImagePlane\n                            src=\"media/images/black.png\"\n                            src_prev=\"media/images/atf_main.jpg\"\n                            image_id=\"corrose-main-image\"\n                            continue\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* A Tree Falls Infomation  */}\n                <Block factor={1.0} offset={7}>\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">\n                            First paragraph with a bit of info about A Tree Falls.\n                        </p>\n\n                        <div className=\"atf-image-1\">\n                            <img\n                                data-id=\"atf-image\"\n                                className=\"image-plane\"\n                                src=\"media/images/atf_1.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <TwoImagePlane\n                            src=\"media/images/black.png\"\n                            src_prev=\"media/images/atf_1.jpg\"\n                            image_id=\"atf-image\"\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* Jack */}\n                <Block factor={1.0} offset={9}>\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">Infomation and background on Jack</p>\n                    </HtmlContent>\n                </Block>\n\n                <Block factor={-1.0} offset={9}>\n                    <HtmlContent portal={domContent} className=\"section-box\">\n                        <div className=\"profile-image-box\">\n                            <img\n                                data-id=\"profile-image\"\n                                className=\"image-plane\"\n                                src=\"media/images/profile.jpg\"\n                                alt=\"album cover for Jack Woodbury's debut album inst.19-20\"\n                            />\n                        </div>\n                    </HtmlContent>\n                    <Suspense\n                        fallback={\n                            <HtmlContent>\n                                <h1>Loading Image</h1>\n                            </HtmlContent>\n                        }\n                    >\n                        <BasicPlane\n                            src=\"media/images/profile.jpg\"\n                            image_id=\"profile-image\"\n                        />\n                    </Suspense>\n                </Block>\n\n                {/* Links To Buy */}\n                <Block factor={1.0} offset={11}>\n                    <VignettePlane color={'#000000'} />\n                    <TransitionPlane upsideDown={true} />\n\n                    <HtmlContent portal={domContent} className=\"paragraph-section-right\">\n                        <p className=\"paragraph\">Links to buy album.</p>\n                    </HtmlContent>\n                </Block>\n\n                {/* Lightbars */}\n                <Block factor={1.0} offset={12}>\n                    <Lightbars position={[0, 0, -5]} />\n                </Block>\n\n                {/* <Suspense fallback={null}>\n                    <Postprocessing />\n                </Suspense> */}\n            </Canvas>\n\n            {/* container with events */}\n            <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll} {...events}>\n                {/* content container containing all html elements */}\n                <div style={{position: 'sticky', top: 0}} ref={domContent} />\n                {/* sizer for the scroll area */}\n                <div style={{height: `${state.pages * 100}vh`}} />\n            </div>\n        </>\n    )\n}\n\nrender(<App />, document.querySelector('#root'))\n"],"sourceRoot":""}